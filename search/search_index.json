{
    "docs": [
        {
            "location": "/", 
            "text": "Taller de Vector Tiles\n\n\nHola mundo.\n\n\n--KEEPME-- Chuleta Markdown\n\n\nT\u00edtulo 3\n\n\nT\u00edtulo 4\n\n\nTexto en \ncursiva\n, \nnegrita\n, \ncursiva y negrita\n.\n\n\nLista desordenada:\n\n\n\n\nLista\n\n\nDesordenada\n\n\n\n\nLista ordenada:\n\n\n\n\nLista\n\n\nOrdenada\n\n\n(Da igual el n\u00famero que pongas)\n\n\n\n\nEsto es un \nenlace\n.\n\n\nLo siguiente es una imagen:\n\n\n\n\nUn comando: \nnpm install\n.\n\n\nUn bloque de c\u00f3digo coloreado (especificar formato, casi cualquiera est\u00e1 soportado):\n\n\n{\n    \nkey\n: \nvalue\n,\n    \nnumbers\n: [1, 2, 3]\n}\n\n\n\n\nY una tabla:\n\n\n\n\n\n\n\n\nHeader 1\n\n\nHeader 2\n\n\n\n\n\n\n\n\n\n\nTal y\n\n\nCual\n\n\n\n\n\n\nFulanito\n\n\nMenganito", 
            "title": "Home"
        }, 
        {
            "location": "/#taller-de-vector-tiles", 
            "text": "Hola mundo.", 
            "title": "Taller de Vector Tiles"
        }, 
        {
            "location": "/#-keepme-chuleta-markdown", 
            "text": "", 
            "title": "--KEEPME-- Chuleta Markdown"
        }, 
        {
            "location": "/#titulo-3", 
            "text": "", 
            "title": "T\u00edtulo 3"
        }, 
        {
            "location": "/#titulo-4", 
            "text": "Texto en  cursiva ,  negrita ,  cursiva y negrita .  Lista desordenada:   Lista  Desordenada   Lista ordenada:   Lista  Ordenada  (Da igual el n\u00famero que pongas)   Esto es un  enlace .  Lo siguiente es una imagen:   Un comando:  npm install .  Un bloque de c\u00f3digo coloreado (especificar formato, casi cualquiera est\u00e1 soportado):  {\n     key :  value ,\n     numbers : [1, 2, 3]\n}  Y una tabla:     Header 1  Header 2      Tal y  Cual    Fulanito  Menganito", 
            "title": "T\u00edtulo 4"
        }, 
        {
            "location": "/servidor_web/", 
            "text": "Servidor Web\n\n\nPara desplegar las aplicaciones que desarrollaremos durante el taller tenemos que utilizar un servidor web ya sea un \nApache\n, \nNginx\n, \nExpress\n, etc. En nuestro caso utilizaremos el Express.\n\n\nInstalaci\u00f3n\n\n\nPara instalar el Express es necesario tener instalado el \nNode.js\n. Una vez instalado el Node.js crear un directorio llamado taller-vt-demo\n\n\nAbrir un terminal y escribir:\n\n\n\n\nmkdir taller-vt-demo\n para crear el directorio de trabajo.\n\n\ncd taller-vt-demo\n para entrar en el directorio de trabajo.\n\n\nnpm init\n para crear un archivo \npackage.json\n para la aplicaci\u00f3n. Este comando solicita varios elementos como, por ejemplo el nombre de la aplicaci\u00f3n, la versi\u00f3n, etc. Para aceptar los valores predeterminador presionar ENTER. \n\n\nnpm install express --save\n para installar el Express en el directorio y guardarlo en la lista de dependencias.\n\n\n\n\nEjemplo Hola Mundo\n\n\nCrear una aplicaci\u00f3n que inicia un servidor y escucha conexiones por el puerto 3000. Esta aplicaci\u00f3n responde con \"Hola Mundo!\" para las solicitudes a la URL ra\u00edz (/).  \n\n\n\n\nCrear un archivo llamado \nserver.js\n y escribir lo siguiente en el archivo\n\n\n\n\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hola Mundo!');\n});\n\napp.listen(3000, function () {\n  console.log('Servidor escuchando en el puerto 3000!');\n});\n\n\n\n\n\n\n\n\nEscribir en el terminal \nnode server.js\n para arrancar el servidor\n\n\n\n\n\n\nAbrir un navegador y escribir http://localhost:3000 y comprobar que la salida es Hola Mundo!\n\n\n\n\n\n\nEjemplo Servir una p\u00e1gina web est\u00e1tica\n\n\nEn el ejemplo anterior la respuesta del servidor era una cadena de texto. En este ejemplo modificaremos el servidor para que retorne archivos est\u00e1ticos como html, css, im\u00e1genes, etc. \n\n\n\n\nModificar el archivo \nservidor.js\n y escribir lo siguiente\n\n\n\n\nvar express = require('express');\nvar app = express();\n\napp.use(express.static('public'));\n\napp.get('/', function(req, res){\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n\n\n\n\n\n\n\n\nCrear un directorio llamado \npublic\n dentro de nuestro directorio de trabajo.\n\n\n\n\n\n\nDentro del directorio \npublic\n crear un archivo llamado \nindex.html\n y escribir lo siguiente dentro del archivo\n\n\n\n\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\nhead\n\n    \nmeta charset=\nUTF-8\n\n    \nmeta name=\nviewport\n content=\nwidth=device-width, initial-scale=1.0\n\n    \nmeta http-equiv=\nX-UA-Compatible\n content=\nie=edge\n\n    \ntitle\nDocument\n/title\n\n\n/head\n\n\nbody\n\n    Hola Mundo!!!\n\n/body\n\n\n/html\n\n\n\n\n\n\n\n\n\nDetener el servidor, presionar Ctrl+c en el terminal donde se est\u00e1 ejecutando el servidor.\n\n\n\n\n\n\nArrancar de nuevo el servidor. Escribir en el terminal \nnode server.js\n.\n\n\n\n\n\n\nAbrir un navegador y escribir http://localhost:3000 y comprobar que la salida es Hola Mundo!!!", 
            "title": "Servidor web"
        }, 
        {
            "location": "/servidor_web/#servidor-web", 
            "text": "Para desplegar las aplicaciones que desarrollaremos durante el taller tenemos que utilizar un servidor web ya sea un  Apache ,  Nginx ,  Express , etc. En nuestro caso utilizaremos el Express.", 
            "title": "Servidor Web"
        }, 
        {
            "location": "/servidor_web/#instalacion", 
            "text": "Para instalar el Express es necesario tener instalado el  Node.js . Una vez instalado el Node.js crear un directorio llamado taller-vt-demo  Abrir un terminal y escribir:   mkdir taller-vt-demo  para crear el directorio de trabajo.  cd taller-vt-demo  para entrar en el directorio de trabajo.  npm init  para crear un archivo  package.json  para la aplicaci\u00f3n. Este comando solicita varios elementos como, por ejemplo el nombre de la aplicaci\u00f3n, la versi\u00f3n, etc. Para aceptar los valores predeterminador presionar ENTER.   npm install express --save  para installar el Express en el directorio y guardarlo en la lista de dependencias.", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/servidor_web/#ejemplo-hola-mundo", 
            "text": "Crear una aplicaci\u00f3n que inicia un servidor y escucha conexiones por el puerto 3000. Esta aplicaci\u00f3n responde con \"Hola Mundo!\" para las solicitudes a la URL ra\u00edz (/).     Crear un archivo llamado  server.js  y escribir lo siguiente en el archivo   var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hola Mundo!');\n});\n\napp.listen(3000, function () {\n  console.log('Servidor escuchando en el puerto 3000!');\n});    Escribir en el terminal  node server.js  para arrancar el servidor    Abrir un navegador y escribir http://localhost:3000 y comprobar que la salida es Hola Mundo!", 
            "title": "Ejemplo Hola Mundo"
        }, 
        {
            "location": "/servidor_web/#ejemplo-servir-una-pagina-web-estatica", 
            "text": "En el ejemplo anterior la respuesta del servidor era una cadena de texto. En este ejemplo modificaremos el servidor para que retorne archivos est\u00e1ticos como html, css, im\u00e1genes, etc.    Modificar el archivo  servidor.js  y escribir lo siguiente   var express = require('express');\nvar app = express();\n\napp.use(express.static('public'));\n\napp.get('/', function(req, res){\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});    Crear un directorio llamado  public  dentro de nuestro directorio de trabajo.    Dentro del directorio  public  crear un archivo llamado  index.html  y escribir lo siguiente dentro del archivo    !DOCTYPE html  html lang= en  head \n     meta charset= UTF-8 \n     meta name= viewport  content= width=device-width, initial-scale=1.0 \n     meta http-equiv= X-UA-Compatible  content= ie=edge \n     title Document /title  /head  body \n    Hola Mundo!!! /body  /html     Detener el servidor, presionar Ctrl+c en el terminal donde se est\u00e1 ejecutando el servidor.    Arrancar de nuevo el servidor. Escribir en el terminal  node server.js .    Abrir un navegador y escribir http://localhost:3000 y comprobar que la salida es Hola Mundo!!!", 
            "title": "Ejemplo Servir una p\u00e1gina web est\u00e1tica"
        }, 
        {
            "location": "/visor_simple/", 
            "text": "Visor simple\n\n\nEn este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS. Tanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para simbolizar los mismo se encuentran en la red.\n\n\n\n\nDentro de la carpeta public crear un archivo llamado visor_simple.html y copiar el siguiente c\u00f3digo\n\n\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset='utf-8' /\n\n    \ntitle\nDisplay a map\n/title\n\n    \nmeta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /\n\n    \nscript src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'\n/script\n\n    \nlink href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css' rel='stylesheet' /\n\n    \nstyle\n\n        body { margin:0; padding:0; }\n        #map { position:absolute; top:0; bottom:0; width:100%; }\n    \n/style\n\n\n/head\n\n\nbody\n\n\n\ndiv id='map'\n/div\n\n\nscript\n\nvar map = new mapboxgl.Map({\n    container: 'map', // id contenedor\n    style: 'https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json', // ubicaci\u00f3n del estilo\n    center: [2, 42], // posici\u00f3n inicial [lng, lat]\n    zoom: 7 // zoom inicial\n});\n\n// Agregar los controles de zoom y rotaci\u00f3n al mapa.\nmap.addControl(new mapboxgl.NavigationControl());\n\n\n/script\n\n\n\n/body\n\n\n/html\n\n\n\n\n\n\n\nAbrir el navegador y escribir http://localhost:3000/visor_simple.html en la barra de navegaci\u00f3n.\n\n\n\n\nAgregar el control para inspecci\u00f3n\n\n\nEl \nInspect Control\n permite ver todos los elementos de un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.\n\n\n\n\nAgregar la librer\u00eda \nmapbox-gl-inspect\n en el archivo visor_simple.html para esto agregar los siguiente justo debajo de donde se carga el estilo mapbox-gl.css\n\n\n\n\nscript src='http://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js'\n/script\n\n\nlink href='http://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css' rel='stylesheet' /\n  \n\n\n\n\n\n\nPara agregar el control de inspecci\u00f3n al mapa, Escribir lo siguente debajo de donde se agrega el \nNavigationControl\n\n\n\n\n// Agragar el control de inspecci\u00f3n\nmap.addControl(new MapboxInspect());\n\n\n\n\n\n\nRecargar la p\u00e1gina en el navegador y comprobar que aparece el Inspect control\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResultado visor simple", 
            "title": "Visor Simple"
        }, 
        {
            "location": "/visor_simple/#visor-simple", 
            "text": "En este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS. Tanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para simbolizar los mismo se encuentran en la red.   Dentro de la carpeta public crear un archivo llamado visor_simple.html y copiar el siguiente c\u00f3digo   !DOCTYPE html  html  head \n     meta charset='utf-8' / \n     title Display a map /title \n     meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' / \n     script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js' /script \n     link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css' rel='stylesheet' / \n     style \n        body { margin:0; padding:0; }\n        #map { position:absolute; top:0; bottom:0; width:100%; }\n     /style  /head  body  div id='map' /div  script \nvar map = new mapboxgl.Map({\n    container: 'map', // id contenedor\n    style: 'https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json', // ubicaci\u00f3n del estilo\n    center: [2, 42], // posici\u00f3n inicial [lng, lat]\n    zoom: 7 // zoom inicial\n});\n\n// Agregar los controles de zoom y rotaci\u00f3n al mapa.\nmap.addControl(new mapboxgl.NavigationControl()); /script  /body  /html    Abrir el navegador y escribir http://localhost:3000/visor_simple.html en la barra de navegaci\u00f3n.", 
            "title": "Visor simple"
        }, 
        {
            "location": "/visor_simple/#agregar-el-control-para-inspeccion", 
            "text": "El  Inspect Control  permite ver todos los elementos de un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.   Agregar la librer\u00eda  mapbox-gl-inspect  en el archivo visor_simple.html para esto agregar los siguiente justo debajo de donde se carga el estilo mapbox-gl.css   script src='http://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js' /script  link href='http://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css' rel='stylesheet' /      Para agregar el control de inspecci\u00f3n al mapa, Escribir lo siguente debajo de donde se agrega el  NavigationControl   // Agragar el control de inspecci\u00f3n\nmap.addControl(new MapboxInspect());   Recargar la p\u00e1gina en el navegador y comprobar que aparece el Inspect control           Resultado visor simple", 
            "title": "Agregar el control para inspecci\u00f3n"
        }, 
        {
            "location": "/tileserver_gl/", 
            "text": "TileServer GL\n\n\nEl \nTileServer GL\n es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y capaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.\n\n\nProporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet, OpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.\n\n\nSi se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas nativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales en teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light que no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.\n\n\nInstalaci\u00f3n\n\n\nPara este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.\n\n\nPara instalar el TileServer GL Light es necesario tener instalado el \nNode.js\n versi\u00f3n 6 o superior. Una vez instalado el Node.js\n\n\n\n\n\n\nAbrir el terminal y escribir \nnpm install -g tileserver-gl-light\n\n\n\n\n\n\nComprobar la instalaci\u00f3n. Escribir \ntileserver-gl-light -v\n. En el terminal debe aparacer un mensaje con la versi\u00f3n del TileServer instalada. \n\n\n\n\n\n\nProbar el servidor\n\n\n\n\n\n\nCrear una carpeta llamada \ndatos\n dentro del directorio de trabajo \ntaller-vt-demo\n. Escribir en la terminal \nmkdir datos\n\n\n\n\n\n\nEscribir \ncd datos\n para entrar en el directorio de datos.\n\n\n\n\n\n\nDescargar los datos. Para ello ir \nOpenMapTiles\n y descargar el archivo \nOpenStreetMap vector tiles\n del \u00e1rea que se quiera dentro del directorio \ndatos\n. Para este taller descargaremos el archivo de \nEspa\u00f1a\n\n\n\n\n\n\nEscribir \ntileserver-gl-light 2017-07-03_europe_spain.mbtiles\n\n\n\n\n\n\nAbrir el navegador y escribir http://localhost:8080 y comprobar que aparece la p\u00e1gina del TileServer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTileServer GL Light", 
            "title": "TileServer GL"
        }, 
        {
            "location": "/tileserver_gl/#tileserver-gl", 
            "text": "El  TileServer GL  es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y capaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.  Proporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet, OpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.  Si se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas nativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales en teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light que no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.", 
            "title": "TileServer GL"
        }, 
        {
            "location": "/tileserver_gl/#instalacion", 
            "text": "Para este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.  Para instalar el TileServer GL Light es necesario tener instalado el  Node.js  versi\u00f3n 6 o superior. Una vez instalado el Node.js    Abrir el terminal y escribir  npm install -g tileserver-gl-light    Comprobar la instalaci\u00f3n. Escribir  tileserver-gl-light -v . En el terminal debe aparacer un mensaje con la versi\u00f3n del TileServer instalada.", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/tileserver_gl/#probar-el-servidor", 
            "text": "Crear una carpeta llamada  datos  dentro del directorio de trabajo  taller-vt-demo . Escribir en la terminal  mkdir datos    Escribir  cd datos  para entrar en el directorio de datos.    Descargar los datos. Para ello ir  OpenMapTiles  y descargar el archivo  OpenStreetMap vector tiles  del \u00e1rea que se quiera dentro del directorio  datos . Para este taller descargaremos el archivo de  Espa\u00f1a    Escribir  tileserver-gl-light 2017-07-03_europe_spain.mbtiles    Abrir el navegador y escribir http://localhost:8080 y comprobar que aparece la p\u00e1gina del TileServer.            TileServer GL Light", 
            "title": "Probar el servidor"
        }
    ]
}