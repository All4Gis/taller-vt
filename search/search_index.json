{
    "docs": [
        {
            "location": "/", 
            "text": "Trabajando con teselas vectoriales\n\n\nBienvenidos al taller de teselas vectoriales. Este manual est\u00e1 publicado aqu\u00ed:\n\n\nhttps://geoinquiets.github.io/taller-vt/\n\n\nRequisitos de software\n\n\n\n\nnode6 y npm (instalar con nvm)\n:\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh \n|\n bash\n  \n# Cerrar y reabrir terminal\n\n  nvm install \n6\n\n  npm install -g npm\n  \n# comprobar versiones\n\n  node -v \n# Deber\u00eda ser 6.x.x\n\n  npm -v \n# Deber\u00eda ser 5.x.x o mayor\n\n\n\n\n\n\n\n\n\n\n\nVisual Studio Code\n\n\n\n\n\n\nChrome\n con la extensi\u00f3n \njson-viewer\n\n\n\n\n\n\nRecursos extra\n\n\nMayormente v\u00eda \nRaf\n, nuestra fuente diaria de vitaminas. \n\n\n\n\nAwesome Vector Tiles\n \n\n\nNatural Earth Vector Tiles by Lukas Martinelli\n\n\nTutorial de los Geoinquietos de Londres\n\n\nTilemaker, de OSM a mbtiles de una tacada\n\n\nQu\u00e9 son las teselas vectoriales (vector tiles) y c\u00f3mo generarlos con PostGIS / GeoServer\n\n\nNatural Earth Quickstart Style implemented with Tegola\n\n\nGeoServer MBStyle Cookbook\n\n\nGeoServer MBStyle Styling Workbook", 
            "title": "Home"
        }, 
        {
            "location": "/#trabajando-con-teselas-vectoriales", 
            "text": "Bienvenidos al taller de teselas vectoriales. Este manual est\u00e1 publicado aqu\u00ed:", 
            "title": "Trabajando con teselas vectoriales"
        }, 
        {
            "location": "/#httpsgeoinquietsgithubiotaller-vt", 
            "text": "", 
            "title": "https://geoinquiets.github.io/taller-vt/"
        }, 
        {
            "location": "/#requisitos-de-software", 
            "text": "node6 y npm (instalar con nvm) :   1\n2\n3\n4\n5\n6\n7   curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh  |  bash\n   # Cerrar y reabrir terminal \n  nvm install  6 \n  npm install -g npm\n   # comprobar versiones \n  node -v  # Deber\u00eda ser 6.x.x \n  npm -v  # Deber\u00eda ser 5.x.x o mayor      Visual Studio Code    Chrome  con la extensi\u00f3n  json-viewer", 
            "title": "Requisitos de software"
        }, 
        {
            "location": "/#recursos-extra", 
            "text": "Mayormente v\u00eda  Raf , nuestra fuente diaria de vitaminas.    Awesome Vector Tiles    Natural Earth Vector Tiles by Lukas Martinelli  Tutorial de los Geoinquietos de Londres  Tilemaker, de OSM a mbtiles de una tacada  Qu\u00e9 son las teselas vectoriales (vector tiles) y c\u00f3mo generarlos con PostGIS / GeoServer  Natural Earth Quickstart Style implemented with Tegola  GeoServer MBStyle Cookbook  GeoServer MBStyle Styling Workbook", 
            "title": "Recursos extra"
        }, 
        {
            "location": "/1_teoria/", 
            "text": "Qu\u00e9 son las teselas vectoriales\n\n\n\n\nqu\u00e9 son,\n\n\npara qu\u00e9 sirven y para qu\u00e9 no,\n\n\nc\u00f3mo est\u00e1n hechas por dentro,\n\n\nc\u00f3mo se almacenan y distribuyen,\n\n\nlistado de software que soporta/maneja VT", 
            "title": "1. Qu\u00e9 son"
        }, 
        {
            "location": "/1_teoria/#que-son-las-teselas-vectoriales", 
            "text": "qu\u00e9 son,  para qu\u00e9 sirven y para qu\u00e9 no,  c\u00f3mo est\u00e1n hechas por dentro,  c\u00f3mo se almacenan y distribuyen,  listado de software que soporta/maneja VT", 
            "title": "Qu\u00e9 son las teselas vectoriales"
        }, 
        {
            "location": "/2_visor_simple/", 
            "text": "C\u00f3mo visualizar teselas vectoriales\n\n\nServidor web\n\n\nPara ver las aplicaciones que desarrollaremos durante el taller necesitamos publicarlas mediante un servidor web.\nEn nuestro caso usaremos \nlive-server\n, que permite servir los contenidos de un directorio y recargar la p\u00e1gina\nautom\u00e1ticamente cuando se modifica el contenido de alg\u00fan fichero.\n\n\nPara instalarlo, se usar\u00e1 el comando:\n\n\n1\nsudo npm install -g live-server\n\n\n\n\n\n\nPara arrancarlo, basta con situarse en el directorio que queramos servir y ejecutar:\n\n\n1\n2\n3\nmkdir taller-vt\n\ncd\n taller-vt\nlive-server\n\n\n\n\n\n\nSe abrir\u00e1 el navegador por defecto con la direcci\u00f3n \nhttp://127.0.0.1:8080/\n\ny se mostrar\u00e1 el contenido del directorio para poder navegar por \u00e9l.\n\n\nDeja la ventana del terminal abierta, y usa la combinaci\u00f3n de teclas \nCtrl\n + \nC\n para parar el servidor.\n\n\nHola Mundo\n\n\nVamos a crear un fichero \nindex.html\n.\n\n\nAbre una nueva ventana de terminal (recuerda dejar el servidor activo) y ejecuta Visual Studio Code\n(o el editor que prefieras):\n\n\n1\ncode .\n\n\n\n\n\n\nCrea un fichero \nindex.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n    \n#x1f596;\n \n#x1f30d;\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nRecargar la p\u00e1gina \nhttp://127.0.0.1:8080/\n en el navegador. Se deber\u00eda ver un \"Hola mundo\".\n\n\nHola Mapa\n\n\nEn este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS.\nTanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para\nsimbolizar los mismos se encuentran en la red.\n\n\nModificar el archivo \nindex.html\n para que contenga el siguiente c\u00f3digo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n\n    \nstyle\n\n\n        \nhtml\n,\n \nbody\n \n{\n\n\n            \nmargin\n:\n \n0\n;\n\n\n            \nheight\n:\n \n100\n%\n;\n\n\n        \n}\n\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n\n    \n});\n\n\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\n\nResultado visor simple\n\n\nInspector de datos\n\n\nEl control \nmapbox-gl-inspect\n permite ver todos los elementos\nde un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.\n\n\nAgregar el c\u00f3digo de la librer\u00eda, e instanciar el control tras crear el mapa:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n        \nstyle\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nSe recargar\u00e1 la p\u00e1gina en el navegador con un nuevo bot\u00f3n que permite la \"visi\u00f3n de rayos X\" sobre los datos.\n\n\n\nResultado visor simple", 
            "title": "2. C\u00f3mo visualizarlas"
        }, 
        {
            "location": "/2_visor_simple/#como-visualizar-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo visualizar teselas vectoriales"
        }, 
        {
            "location": "/2_visor_simple/#servidor-web", 
            "text": "Para ver las aplicaciones que desarrollaremos durante el taller necesitamos publicarlas mediante un servidor web.\nEn nuestro caso usaremos  live-server , que permite servir los contenidos de un directorio y recargar la p\u00e1gina\nautom\u00e1ticamente cuando se modifica el contenido de alg\u00fan fichero.  Para instalarlo, se usar\u00e1 el comando:  1 sudo npm install -g live-server   Para arrancarlo, basta con situarse en el directorio que queramos servir y ejecutar:  1\n2\n3 mkdir taller-vt cd  taller-vt\nlive-server   Se abrir\u00e1 el navegador por defecto con la direcci\u00f3n  http://127.0.0.1:8080/ \ny se mostrar\u00e1 el contenido del directorio para poder navegar por \u00e9l.  Deja la ventana del terminal abierta, y usa la combinaci\u00f3n de teclas  Ctrl  +  C  para parar el servidor.", 
            "title": "Servidor web"
        }, 
        {
            "location": "/2_visor_simple/#hola-mundo", 
            "text": "Vamos a crear un fichero  index.html .  Abre una nueva ventana de terminal (recuerda dejar el servidor activo) y ejecuta Visual Studio Code\n(o el editor que prefieras):  1 code .   Crea un fichero  index.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title  / head  body   id = map \n     #x1f596;   #x1f30d;  / body  / html    Recargar la p\u00e1gina  http://127.0.0.1:8080/  en el navegador. Se deber\u00eda ver un \"Hola mundo\".", 
            "title": "Hola Mundo"
        }, 
        {
            "location": "/2_visor_simple/#hola-mapa", 
            "text": "En este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS.\nTanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para\nsimbolizar los mismos se encuentran en la red.  Modificar el archivo  index.html  para que contenga el siguiente c\u00f3digo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title       link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   /       script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script       style           html ,   body   {               margin :   0 ;               height :   100 % ;           }       / style  / head  body   id = map  script       var   map   =   new   mapboxgl . Map ({           container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial           zoom :   13 ,   // Zoom inicial           bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial           hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL       });        // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:       map . addControl ( new   mapboxgl . NavigationControl ());  / script  / body  / html    \nResultado visor simple", 
            "title": "Hola Mapa"
        }, 
        {
            "location": "/2_visor_simple/#inspector-de-datos", 
            "text": "El control  mapbox-gl-inspect  permite ver todos los elementos\nde un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.  Agregar el c\u00f3digo de la librer\u00eda, e instanciar el control tras crear el mapa:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script       link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   /       script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script       style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa \n         style :   https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json ,   // Ubicaci\u00f3n del estilo \n         center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ());       // Agregar el control de inspecci\u00f3n       map . addControl ( new   MapboxInspect ());  / script  / body  / html    Se recargar\u00e1 la p\u00e1gina en el navegador con un nuevo bot\u00f3n que permite la \"visi\u00f3n de rayos X\" sobre los datos.  \nResultado visor simple", 
            "title": "Inspector de datos"
        }, 
        {
            "location": "/3_tileserver_gl/", 
            "text": "C\u00f3mo servir teselas vectoriales\n\n\nTileServer GL\n\n\nEl \nTileServer GL\n es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y\ncapaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.\n\n\nProporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet,\nOpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.\n\n\nSi se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas\nnativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales en teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light que no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.\n\n\nInstalaci\u00f3n\n\n\nPara este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.\n\n\nEs necesario tener instalado \nNode.js\n versi\u00f3n 6.\n\n\n\n\nWarning\n\n\ntileserver-gl-light NO se instalar\u00e1 correctamente si estamos usando una versi\u00f3n de Node.js superior a la 6.\nDebemos activar esta versi\u00f3n de node con el comando:\n\n\n1\n2\nnvm use \n6\n\nnode -v \n# Deber\u00eda devolver: 6.x.x\n\n\n\n\n\n\n\n\n\nUna vez comprobada la versi\u00f3n de node:\n\n\n1\n2\nnpm install -g tileserver-gl-light@2.3.1\ntileserver-gl-light -v \n# Deberia devolver: v2.3.1 \n\n\n\n\n\n\n\nObtenci\u00f3n de datos\n\n\nCrear una carpeta llamada \ntileserver/data\n y copiar en ella el fichero \nbarcelona.mbtiles\n:\n\n\n1\n2\n3\nmkdir -p tileserver/data\n\ncd\n tileserver/data\nwget https://geoinquiets.github.io/taller-vt/data/barcelona.mbtiles\n\n\n\n\n\n\n\n\nTip\n\n\nEn la web de \nOpenMapTiles\n se pueden descargar datos de muchas\notras ciudades, pa\u00edses, e incluso el planeta entero. Es gratu\u00edto, aunque hay que registrarse.\n\n\n\n\nArrancar el servidor\n\n\nAhora arrancaremos el servidor en el puerto \n8181\n (par\u00e1metro \n-p\n):\n\n\n1\ntileserver-gl-light barcelona.mbtiles -p \n8181\n\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8181\n. Aparecer\u00e1 la p\u00e1gina del TileServer.\n\n\nDejar el terminal abierto con el servidor arrancado.\n\n\n\n\nTileServer GL Light\n\n\nModificar el visor de mapas\n\n\nModificaremos nuestro archivo \nindex.html\n para que el visor de mapas consuma las teselas vectoriales servidas por\n nuestro TileServer:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8181/styles/osm-bright/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml", 
            "title": "3. C\u00f3mo servirlas"
        }, 
        {
            "location": "/3_tileserver_gl/#como-servir-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo servir teselas vectoriales"
        }, 
        {
            "location": "/3_tileserver_gl/#tileserver-gl", 
            "text": "El  TileServer GL  es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y\ncapaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.  Proporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet,\nOpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.  Si se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas\nnativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales en teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light que no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.", 
            "title": "TileServer GL"
        }, 
        {
            "location": "/3_tileserver_gl/#instalacion", 
            "text": "Para este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.  Es necesario tener instalado  Node.js  versi\u00f3n 6.   Warning  tileserver-gl-light NO se instalar\u00e1 correctamente si estamos usando una versi\u00f3n de Node.js superior a la 6.\nDebemos activar esta versi\u00f3n de node con el comando:  1\n2 nvm use  6 \nnode -v  # Deber\u00eda devolver: 6.x.x     Una vez comprobada la versi\u00f3n de node:  1\n2 npm install -g tileserver-gl-light@2.3.1\ntileserver-gl-light -v  # Deberia devolver: v2.3.1", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/3_tileserver_gl/#obtencion-de-datos", 
            "text": "Crear una carpeta llamada  tileserver/data  y copiar en ella el fichero  barcelona.mbtiles :  1\n2\n3 mkdir -p tileserver/data cd  tileserver/data\nwget https://geoinquiets.github.io/taller-vt/data/barcelona.mbtiles    Tip  En la web de  OpenMapTiles  se pueden descargar datos de muchas\notras ciudades, pa\u00edses, e incluso el planeta entero. Es gratu\u00edto, aunque hay que registrarse.", 
            "title": "Obtenci\u00f3n de datos"
        }, 
        {
            "location": "/3_tileserver_gl/#arrancar-el-servidor", 
            "text": "Ahora arrancaremos el servidor en el puerto  8181  (par\u00e1metro  -p ):  1 tileserver-gl-light barcelona.mbtiles -p  8181    Abrir el navegador y escribir  http://localhost:8181 . Aparecer\u00e1 la p\u00e1gina del TileServer.  Dejar el terminal abierto con el servidor arrancado.   TileServer GL Light", 
            "title": "Arrancar el servidor"
        }, 
        {
            "location": "/3_tileserver_gl/#modificar-el-visor-de-mapas", 
            "text": "Modificaremos nuestro archivo  index.html  para que el visor de mapas consuma las teselas vectoriales servidas por\n nuestro TileServer:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8181/styles/osm-bright/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Modificar el visor de mapas"
        }, 
        {
            "location": "/4_tippecanoe/", 
            "text": "C\u00f3mo crear teselas vectoriales\n\n\nTippecanoe\n\n\nHerramienta que permite crear tesalas vectoriales de colecciones grandes (o peque\u00f1as) de elementos GeoJSON, Geobuf o CSV.\n\n\nEl objetivo de Tippecanoe es permitir una visi\u00f3n de sus datos independiente de la escala, de modo que en cualquier nivel desde el mundo entero hasta un solo edificio, podamos ver la densidad y la textura de los datos en lugar de una simplificaci\u00f3n para eliminar caracter\u00edsticas supuestamente sin importancia o agrup\u00e1ndolos o agreg\u00e1ndolos.\n\n\nAlgunos ejemplos:\n\n\n\n\n\n\nSi le da todo OpenStreetMap y alejas la vista, le devolver\u00e1 algo que se parece a \"Todas las calles\" en lugar de algo que parece un atlas de carretera interestatal.\n\n\n\n\n\n\nSi le das todas las huellas de edificios en Los \u00c1ngeles y alejas la vista lo suficiente como para que la mayor\u00eda de los edificios individuales ya no sean perceptibles, a\u00fan deber\u00edas poder ver la extensi\u00f3n y variedad del desarrollo en cada vecindario, no solo en los edificios m\u00e1s grandes del centro.\n\n\n\n\n\n\nInstalaci\u00f3n\n\n\nPara instalar Tippecanoe en Ubuntu lo m\u00e1s f\u00e1cil es compilarlo desde el repositorio fuente. Abrimos un terminal y escribimos\n\n\n1\n2\ngit clone git@github.com:mapbox/tippecanoe.git\n\ncd\n tippecanoe\n\n\n\n\n\n\nTippecanoe require las librer\u00edas sqlite3 y zlib. Para instalar las dependencias escribimos lo siguiente \n\n\n1\nsudo apt install build-essential libsqlite3-dev zlib1g-dev\n\n\n\n\n\n\nUna vez instaladas las dependencias vamos a compliar el programa, para ello escribiremos\n\n\n1\n2\nmake -j\nsudo make install\n\n\n\n\n\n\nPara probar que la instalaci\u00f3n ha sido correcta escribimos:\n\n\n1\ntippecanoe -v\n\n\n\n\n\n\ny nos debe retornar la versi\u00f3n de tippecanoe instalada.\n\n\nUna vez est\u00e1 instalado el ejecutable, podemos borrar el proyecto:\n\n\n1\n2\ncd\n ..\nrm -rf tippecanoe\n\n\n\n\n\n\nDatos\n\n\nDescageremos algunos datos de \nNatural Earth\n en nuestra carpeta de datos. En el apartado de descargas de Natural Earth hay varios conjuntos de datos (en formato Shapefile) seg\u00fan la escala. \n\n\nEn el taller trabajaremos con un subconjunto de los datos de la escala 1:10m (1:10.000.000). Para ahorrarnos la transformaci\u00f3n de Shapefile a GeoJSON utilizaremos los datos procedentes de \nhttps://github.com/nvkelso/natural-earth-vector/\n\n\nDescagaremos las siguientes capas:\n\n\n\n\nCultural\n\n\nAdmin 0 \u2013 Countries (247 pa\u00edses en el mundo. Groenlandia separada de Dinamarca)\n\n\nPopulated Places (Puntos de ciudades y pueblos)\n\n\nRoads (Carreteras principales)\n\n\nRailroads (V\u00edas de Trenes)\n\n\nAirports (Aeropuertos)\n\n\n\n\n\n\nPhysical\n\n\nCoastline (L\u00ednea de costa que incluyen islas principales)\n\n\nLand (Pol\u00edgonos terrestres que incluyen islas principales)\n\n\nOcean (Oceano)\n\n\nRivers + lake centerlines (Rios en \u00fanica l\u00ednea que incluyen l\u00edneas centrales de lagos)\n\n\nLakes + Reservoirs (Lagos naturales y artificiales)\n\n\n\n\n\n\n\n\nPara descargar las capas escribiremos lo siguiente en nuestro terminal.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nmkdir naturalearth\n\ncd\n naturalearth\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_populated_places.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_roads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_railroads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_airports.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_coastline.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_land.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_ocean.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_lake_centerlines.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_lakes.geojson\n\n\n\n\n\n\nCrear el mbtiles\n\n\nUna vez descargados todos nuestros datos vamos a crear un mbtiles llamado \nnatural_earth.mbtiles\n que contendr\u00e1 nuestras 10 capas. \n\n\nPara crear el mbtiles utilizaremos las siguientes opciones del Tippecanoe (\nListado de opciones\n):\n\n\n\n\n-o \nnombre.mbtiles\n: nombre del archivo de salida.\n\n\n-zg: Estima un maxzoom razonable basado en el espaciado de los elementos.\n\n\n--drop-densest-as-needed: Si una tesela es demasiado grande, intenta reducirla a menos de 500K aumentando el espacio m\u00ednimo entre los elementos.\n\n\n-L \nnombre\n:\narchivo.json\n: permite definir nombres de capa para cada archivo individual.  \n\n\n\n\nPara generar el archivo mbtiles escribiremos lo siguiente en el terminal.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ntippecanoe -o natural_earth.mbtiles -zg --drop-densest-as-needed \\\n  -L ocean:ne_10m_ocean.geojson \\\n  -L land:ne_10m_land.geojson \\\n  -L admin:ne_10m_admin_0_countries.geojson \\\n  -L coastline:ne_10m_coastline.geojson \\\n  -L lakes:ne_10m_lakes.geojson \\\n  -L rivers:ne_10m_rivers_lake_centerlines.geojson \\\n  -L rail:ne_10m_railroads.geojson \\\n  -L roads:ne_10m_roads.geojson \\\n  -L cities:ne_10m_populated_places.geojson \\\n  -L airports:ne_10m_airports.geojson\n\n\n\n\n\n\nVisualizar el mbtiles\n\n\nUtilizaremos el TileServer para visualizar el mbtiles creado con el Tippecanoe. Para ello escribimos lo siguiente en el terminal:\n\n\n1\n2\n3\nmv natural_earth.mbtiles ../servidor/data\ncd ../servidor\nnpx tileserver-gl-light data/natural_earth.mbtiles -p 8181\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8181\n y comprobar que aparece la p\u00e1gina del TileServer con nuestro mbtiles\n\n\n\n\nTileServer GL Light\n\n\nApretar el bot\u00f3n de \nInspect\n y comprobar que en el mapa aparecen todas las capas agregadas al mbtiles\n\n\n\n\nMbtiles Natural Earth", 
            "title": "4. C\u00f3mo crearlas"
        }, 
        {
            "location": "/4_tippecanoe/#como-crear-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo crear teselas vectoriales"
        }, 
        {
            "location": "/4_tippecanoe/#tippecanoe", 
            "text": "Herramienta que permite crear tesalas vectoriales de colecciones grandes (o peque\u00f1as) de elementos GeoJSON, Geobuf o CSV.  El objetivo de Tippecanoe es permitir una visi\u00f3n de sus datos independiente de la escala, de modo que en cualquier nivel desde el mundo entero hasta un solo edificio, podamos ver la densidad y la textura de los datos en lugar de una simplificaci\u00f3n para eliminar caracter\u00edsticas supuestamente sin importancia o agrup\u00e1ndolos o agreg\u00e1ndolos.  Algunos ejemplos:    Si le da todo OpenStreetMap y alejas la vista, le devolver\u00e1 algo que se parece a \"Todas las calles\" en lugar de algo que parece un atlas de carretera interestatal.    Si le das todas las huellas de edificios en Los \u00c1ngeles y alejas la vista lo suficiente como para que la mayor\u00eda de los edificios individuales ya no sean perceptibles, a\u00fan deber\u00edas poder ver la extensi\u00f3n y variedad del desarrollo en cada vecindario, no solo en los edificios m\u00e1s grandes del centro.", 
            "title": "Tippecanoe"
        }, 
        {
            "location": "/4_tippecanoe/#instalacion", 
            "text": "Para instalar Tippecanoe en Ubuntu lo m\u00e1s f\u00e1cil es compilarlo desde el repositorio fuente. Abrimos un terminal y escribimos  1\n2 git clone git@github.com:mapbox/tippecanoe.git cd  tippecanoe   Tippecanoe require las librer\u00edas sqlite3 y zlib. Para instalar las dependencias escribimos lo siguiente   1 sudo apt install build-essential libsqlite3-dev zlib1g-dev   Una vez instaladas las dependencias vamos a compliar el programa, para ello escribiremos  1\n2 make -j\nsudo make install   Para probar que la instalaci\u00f3n ha sido correcta escribimos:  1 tippecanoe -v   y nos debe retornar la versi\u00f3n de tippecanoe instalada.  Una vez est\u00e1 instalado el ejecutable, podemos borrar el proyecto:  1\n2 cd  ..\nrm -rf tippecanoe", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/4_tippecanoe/#datos", 
            "text": "Descageremos algunos datos de  Natural Earth  en nuestra carpeta de datos. En el apartado de descargas de Natural Earth hay varios conjuntos de datos (en formato Shapefile) seg\u00fan la escala.   En el taller trabajaremos con un subconjunto de los datos de la escala 1:10m (1:10.000.000). Para ahorrarnos la transformaci\u00f3n de Shapefile a GeoJSON utilizaremos los datos procedentes de  https://github.com/nvkelso/natural-earth-vector/  Descagaremos las siguientes capas:   Cultural  Admin 0 \u2013 Countries (247 pa\u00edses en el mundo. Groenlandia separada de Dinamarca)  Populated Places (Puntos de ciudades y pueblos)  Roads (Carreteras principales)  Railroads (V\u00edas de Trenes)  Airports (Aeropuertos)    Physical  Coastline (L\u00ednea de costa que incluyen islas principales)  Land (Pol\u00edgonos terrestres que incluyen islas principales)  Ocean (Oceano)  Rivers + lake centerlines (Rios en \u00fanica l\u00ednea que incluyen l\u00edneas centrales de lagos)  Lakes + Reservoirs (Lagos naturales y artificiales)     Para descargar las capas escribiremos lo siguiente en nuestro terminal.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 mkdir naturalearth cd  naturalearth\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_populated_places.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_roads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_railroads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_airports.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_coastline.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_land.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_ocean.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_lake_centerlines.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_lakes.geojson", 
            "title": "Datos"
        }, 
        {
            "location": "/4_tippecanoe/#crear-el-mbtiles", 
            "text": "Una vez descargados todos nuestros datos vamos a crear un mbtiles llamado  natural_earth.mbtiles  que contendr\u00e1 nuestras 10 capas.   Para crear el mbtiles utilizaremos las siguientes opciones del Tippecanoe ( Listado de opciones ):   -o  nombre.mbtiles : nombre del archivo de salida.  -zg: Estima un maxzoom razonable basado en el espaciado de los elementos.  --drop-densest-as-needed: Si una tesela es demasiado grande, intenta reducirla a menos de 500K aumentando el espacio m\u00ednimo entre los elementos.  -L  nombre : archivo.json : permite definir nombres de capa para cada archivo individual.     Para generar el archivo mbtiles escribiremos lo siguiente en el terminal.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 tippecanoe -o natural_earth.mbtiles -zg --drop-densest-as-needed \\\n  -L ocean:ne_10m_ocean.geojson \\\n  -L land:ne_10m_land.geojson \\\n  -L admin:ne_10m_admin_0_countries.geojson \\\n  -L coastline:ne_10m_coastline.geojson \\\n  -L lakes:ne_10m_lakes.geojson \\\n  -L rivers:ne_10m_rivers_lake_centerlines.geojson \\\n  -L rail:ne_10m_railroads.geojson \\\n  -L roads:ne_10m_roads.geojson \\\n  -L cities:ne_10m_populated_places.geojson \\\n  -L airports:ne_10m_airports.geojson", 
            "title": "Crear el mbtiles"
        }, 
        {
            "location": "/4_tippecanoe/#visualizar-el-mbtiles", 
            "text": "Utilizaremos el TileServer para visualizar el mbtiles creado con el Tippecanoe. Para ello escribimos lo siguiente en el terminal:  1\n2\n3 mv natural_earth.mbtiles ../servidor/data\ncd ../servidor\nnpx tileserver-gl-light data/natural_earth.mbtiles -p 8181   Abrir el navegador y escribir  http://localhost:8181  y comprobar que aparece la p\u00e1gina del TileServer con nuestro mbtiles   TileServer GL Light  Apretar el bot\u00f3n de  Inspect  y comprobar que en el mapa aparecen todas las capas agregadas al mbtiles   Mbtiles Natural Earth", 
            "title": "Visualizar el mbtiles"
        }, 
        {
            "location": "/5_estilos/", 
            "text": "C\u00f3mo simbolizar teselas vectoriales\n\n\nMaputnik\n\n\nEs un editor visual gratuito y abierto para estilos Mapbox GL dirigidos tanto a desarrolladores como a dise\u00f1adores de mapas.\n\n\nSe puede utilizar en l\u00ednea en \nMaputnik editor\n (todo se guarda en el almacenamiento local) \u00f3 se puede hacer una instalaci\u00f3n local.\n\n\nInstalaci\u00f3n\n\n\nSi vamos a la p\u00e1gina de \nReleases\n de Maputnik aparece que la \u00faltima versi\u00f3n es la v1.0.2. Realmente existe una versi\u00f3n v1.1.0 que est\u00e1 en la p\u00e1gina de releases pero que no est\u00e1 marcada como la \u00faltima versi\u00f3n.\n\n\nDescagaremos la versi\u00f3n v1.1.0 que es la \u00faltima versi\u00f3n disponible para la fecha de este taller. \n\n\n1\n2\nwget https://github.com/maputnik/editor/archive/v1.1.0.tar.gz\ntar -xzvf archivo.tar.gz\n\n\n\n\n\n\nVamos a la carpeta \neditor-1.1.0\n creada al descomprimir el archivo descargado he instalamos las dependencias del Maputnik\n\n\n1\n2\ncd\n editor-1.1.0\nnpm install\n\n\n\n\n\n\nAl finalizar la instalaci\u00f3n comprobamos que no aparezca ning\u00fan error (pueden aparecer algunos WARN) y arrancamos el servidor de Maputnik\n\n\n1\nnpm start\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8888\n y comprobar que aparece la p\u00e1gina del Maputnik\n\n\n\n\nMaputnik\n\n\nEstilizar el mbtiles\n\n\nPor defecto Maputnik nos\n\n\nAgregar un origen de datos (Source)\n\n\nEn el editor del Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nSource\n para desplegar el di\u00e1logo de gestionar fuentes de datos. En la parte inferior del di\u00e1logo esta el apartado para agregar una fuente nueva de datos \nAdd New Source\n. Para agregar nuestra fuente de datos mbtiles tenemos dos opciones.\n\n\n\n\nMaputnik agregar origen de datos\n\n\n\n\nVector (TileJSON URL)\n\n\n\n\nSource ID\n: identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos \nnatural_earth\n\n\nSource Type\n: tipo de la fuente de datos. Seleccionar la opci\u00f3n de \nVector (TileJSON URL)\n\n\nTileJSON URL\n: url del archivo JSON de descripci\u00f3n de la fuente. Pondremos la url de nuestro TileServerGL \nhttp://localhost:8181/data/natural_earth.json\n\n\n\n\nVector (XYZ URL)\n\n\n\n\nSource ID\n: identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos \nnatural_earth_1\n\n\nSource Type\n: tipo de la fuente de datos. Seleccionar la opci\u00f3n de \nVector (XYZ URL)\n\n\nTileJSON URL\n: url del servicio de teselas. Pondremos la url de nuestro TileServerGL \nhttp://localhost:8181/data/natural_earth/{z}/{x}/{y}.pbf\n\n\nMin Zoom\n: 0\n\n\nMax Zoom\n: 5\n\n\nAgregar sprite y glyph\n\n\nEn el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nStyle Settings\n para desplegar el di\u00e1logo de gestionar la configuraci\u00f3n del estilo.\n\n\n\n\nMaputnik configuraci\u00f3n de estilo\n\n\nName\n: nombre del estilo. En nuestro caso pondremos \nnatural earth\n\n\nSprite URL\n: proporciona una plantilla para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de estilo del fondo, patrones de relleno, patrones de l\u00edneas e imagenes de iconos. En nuestro caso pondremos \"\nhttps://openmaptiles.github.io/osm-bright-gl-style/sprite\n\"\n\n\nGlyphs URL\n: proporciona una plantilla para cargar conjuntos de glifos formato PBF. Aqu\u00ed es donde se cargan las diferentes fuentes. En nuestro caso pondremos \"\nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n\"\n\n\nAgregar una capa\n\n\nEn el editor de Maputnik presionamos el bot\u00f3n de \nAdd Layer\n para desplegar el di\u00e1logo de agregar capa al mapa. \n\n\n\n\nMaputnik agregar capa\n\n\nID\n: identificador \u00fanico de la capa. Pondremos \noceanos\n\n\nType\n: tipo de capa. Seleccionar la opci\u00f3n de \nFill\n ya que la capa es de tipo pol\u00edgono\n\n\nSource\n: identificador del origen de datos. En nuestro caso pondremos \nnatural_earth\n\n\nSource Layer\n: identificador de la capa dentro del origen de datos. Pondremos \nocean\n para agregar la capa de los oc\u00e9anos.\n\n\nEstilizar una capa seg\u00fan un campo\n\n\nEn esta versi\u00f3n de maputnik (v1.1.0) no est\u00e1 implemantado el estilo \nbasado en expressiones\n. Se pueden utilizar los \nstops\n que actualmente estan \ndeprecated\n para aplicar estilos seg\u00fan el nivel de zoom. En nuestro caso tendremos que utilizar filtros para poder estilizar una capa seg\u00fan un valor de un campo de texto.\n\n\n\n\n\n\nAgregar la capa de lineas de Ferry. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \nferrys\n\n\nType\n: \nLine\n ya que la capa es de tipo l\u00ednea\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \nroads\n para agregar la capa de carreteras que tambi\u00e9n contiena las lineas de ferry.\n\n\n\n\n\n\nVemos que aparecen todas las carreteras en el mapa.\n\n\n\n\n\n\nFiltar la informaci\u00f3n. Selecci\u00f3n la capa de \nferrys\n y en el apartado de Filter presionar el bot\u00f3n de \nAdd filter\n. En registro que aparece poner la siguiente informaci\u00f3n:\n\n\n\n\n\n\n\n\nMaputnik agregar filtro a una capa\n\n\n1\n2\n3\n4\n5\n* Cambiar donde dice name por *type*\n\n* Dejar el selector de comparaci\u00f3n en *==*\n\n* Escribir en el campo de valor (que est\u00e1 vacio) *Ferry Route*\n\n\n\n\n\n\nComprobar que s\u00f3lo aparacen las l\u00edneas de Ferry en el mapa.\n\n\n\n\nQuestion\n\n\nHacer lo mismo para agregar la capa de carreteras principales(Major Highway) y secundarias(Secondary Highway).\n\n\n\n\nEtiquetar una capa\n\n\n\n\n\n\nAgregar la capa de ciudades. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \nciudades_etiquetas\n\n\nType\n: \nSymbol\n ya que queremos que sea de tipo texto\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \ncities\n para agregar la capa de ciudades.\n\n\n\n\n\n\nAgregar el campo por el que se quiere etiquetar. Seleccionar la capa de \nciudades\n y en el apartado de \nText layout properties\n en el campo \nField\n escribir \n{nombre del campo}\n. En nuestro caso debemos escribir \n{NAME}\n.\n\n\n\n\n\n\nEstilizar las etiquetas. En el apartado de \nText paint properties\n podemos definir el estilo de las etiquetas. Para los textos podemos definir un Halo para que el teto destaque mejor en nuestro mapa.\n\n\n\n\n\n\nUtilizar un icono para simbolizar nuestra capa\n\n\n\n\n\n\nAgregar la capa de aeropuertos. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \naeropuertos\n\n\nType\n: \nSymbol\n ya que queremos que sea de tipo texto\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \nairports\n para agregar la capa de aeropuertos.\n\n\n\n\n\n\nAgregar el icono. Selecccionar la capa de \naeropuertos\n y en el apartado de \nIcon layout properties\n escribir en el campo \nImage\n \nairport_11\n. Este nombre debe coincidir con alguna imagen definida en el sprite.\n\n\n\n\n\n\nComprobar que aparecen los aeropuertos en el mapa\n\n\n\n\n\n\n\n\nTip\n\n\nAqui puede ver la lista de los nombres de las im\u00e1genes del sprite que estamos utilizando \nhttps://github.com/openmaptiles/osm-bright-gl-style/tree/master/icons\n.\n\n\n\n\nEjercicio\n\n\nAgregar y aplicar estilo al resto de capas del \nnatural_earth.mbtiles\n\n\nExportar el estilo creado\n\n\nEn el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nExport\n para desplegar el di\u00e1logo de exportaci\u00f3n del estilo.\n\n\nEn el dialogo presionamos el boton de \nDownload\n para descargar el estilo en nuestro ordenador.\n\n\nDescargamos el archivo y lo renombramos a \nnatural_earth.json\n. Luego lo movemos a la carpeta \ndata\n\n\nDentro de la carpeta \ndata\n crear un fichero \nconfig.json\n. Para m\u00e1s detalles \nhttp://tileserver.readthedocs.io/en/latest/config.html#\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n{\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nEjecutar el tileserver utilizando el archivo de configuraci\u00f3n creado\n\n\n1\ntileserver-gl-light -c config.test.json -p \n8181\n\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8181\n. Aparecer\u00e1 la p\u00e1gina del TileServer donde podemos comprobar nuestro estilo presionando el bot\u00f3n de \nVector\n\n\nModificar el archivo \nindex.html\n para que el visor de mapa para cargue los datos de Natural Earth con el estilo creado en Maputnik\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8181/styles/natural-earth/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nEstilo basado en datos (data-driven style)\n\n\nEl estilo basado en datos le permite estilizar los datos en funci\u00f3n de sus propiedades. Por ejemplo, cambiar el radio de un c\u00edrculo en funci\u00f3n de la cantidad de clientes, cambiar el color de un pol\u00edgono de estado seg\u00fan la poblaci\u00f3n o usar la l\u00f3gica condicional para crear etiquetas biling\u00fces.\n\n\nPara crear estilos basados en datos debemos usar las Mapbox GL JS expressions. En la especificaci\u00f3n de estilo de Mapbox, el valor de cualquier propiedad de dise\u00f1o, propiedad de estilo o filtro se puede especificar como una expresi\u00f3n. Las expresiones definen c\u00f3mo se combinan uno o m\u00e1s valores de propiedad y / o el nivel de zoom actual utilizando operaciones l\u00f3gicas, matem\u00e1ticas, de cadena o de color para producir el valor de propiedad de estilo apropiado o la decisi\u00f3n de filtro.\n\n\nPara m\u00e1s informaci\u00f3n y ejemplos \nhttps://www.mapbox.com/help/how-map-design-works/#data-driven-styles\n\n\nCrear un estilo basado en datos\n\n\nCopiar el estilo \nnatural_earth.json\n en un fichero llamado \nnatural_earth_2.json\n\n\nEstilo basado en valores concretos de una propiedad\n\n\nEditar el fichero \nnatural_earth_2.json\n y eliminar las capas con id \nsecundarias\n, \nprincipales\n y \nferrys\n\n\nEntre la capa con id \nland\n y la capa con id \naeropuertos\n crear una capa con id \nroads\n. El color de las l\u00edneas de esta capa varia dependiendo del valor de la propiedad \ntype\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n{\n\n    \nid\n:\n \nroads\n,\n\n    \ntype\n:\n \nline\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \nroads\n,\n\n    \nlayout\n:\n \n{\n\n        \nvisibility\n:\n \nvisible\n\n    \n},\n\n    \npaint\n:\n \n{\n\n        \nline-color\n:\n \n[\n\n            \nmatch\n,\n\n            \n[\n\n                \nget\n,\n\n                \ntype\n\n            \n],\n\n            \nSecondary Highway\n,\n\n            \nrgba(206, 32, 79, 1)\n,\n\n            \nFerry Route\n,\n\n            \nrgba(138, 154, 241, 1)\n,\n\n            \nMajor Highway\n,\n\n            \nrgba(20, 52, 232, 1)\n,\n\n            \n#000000\n\n        \n],\n\n        \nline-width\n:\n \n2\n\n    \n}\n\n\n},\n\n\n\n\n\n\n\nEstilo basado en el nivel del zoom\n\n\nEditar el fichero \nnatural_earth_2.json\n modificar la capa \nciudades_etiquetas\n para cambiar el tama\u00f1o del texto basado en el nivel de zoom del mapa y en la propiedad \nSCALERANK\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n{\n\n    \nid\n:\n \nciudades_etiquetas\n,\n\n    \ntype\n:\n \nsymbol\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \ncities\n,\n\n    \nlayout\n:\n \n{\n\n    \nsymbol-placement\n:\n \npoint\n,\n\n    \ntext-field\n:\n \n{NAME}\n,\n\n    \nvisibility\n:\n \nvisible\n,\n\n    \ntext-anchor\n:\n \nbottom\n,\n\n    \ntext-offset\n:\n \n[\n0\n,\n \n-\n1\n],\n\n    \ntext-size\n:\n \n[\n\n        \nstep\n,\n\n        \n[\nzoom\n],\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n3\n\n        \n],\n\n        \n18\n,\n\n        \n0\n\n        \n],\n\n        \n5\n,\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n2\n\n        \n],\n\n        \n20\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n5\n\n        \n],\n\n        \n14\n,\n\n        \n10\n\n        \n],\n\n        \n8\n,\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n2\n\n        \n],\n\n        \n24\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n5\n\n        \n],\n\n        \n18\n,\n\n        \n14\n\n        \n]\n\n    \n]\n\n    \n},\n\n    \npaint\n:\n \n{\n\n    \ntext-halo-color\n:\n \nrgba(253, 253, 253, 1)\n,\n\n    \ntext-halo-width\n:\n \n5\n,\n\n    \ntext-color\n:\n \nrgba(16, 16, 16, 1)\n,\n\n    \ntext-halo-blur\n:\n \n2\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nEstilo basado en una propiedad\n\n\nCrear una capa con id \nciudades\n y de tipo \ncircle\n entre las capas \naeropuertos\n y la capa \nciudades_etiquetas\n. En esta nueva capa el tama\u00f1o del circulo utilizar\u00e1 directamente el valor de la propiedad \nSCALERANK\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\n    \nid\n:\n \nciudades\n,\n\n    \ntype\n:\n \ncircle\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \ncities\n,\n\n    \nlayout\n:\n \n{\n\n    \nvisibility\n:\n \nvisible\n\n    \n},\n\n    \npaint\n:\n \n{\n\n    \ncircle-color\n:\n \n[\n\n        \nmatch\n,\n\n        \n[\nget\n,\n \nADM0CAP\n],\n\n        \n0\n,\n\n        \nhsl(285, 75%, 68%)\n,\n\n        \nhsl(0, 96%, 48%)\n\n    \n],\n\n    \ncircle-radius\n:\n \n[\n-\n,\n \n15\n,\n \n[\nget\n,\nSCALERANK\n]]\n\n    \n}\n\n\n},\n\n\n\n\n\n\n\nAgregar el nuevo estilo al fichero de configuraci\u00f3n \nconfig.json\n del tileserver-gl\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n{\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n},\n\n\n    \nnatural-earth-2\n:\n \n{\n\n\n      \nstyle\n:\n \nnatural_earth_2.json\n,\n\n\n      \ntilejson\n:\n \n{\n\n\n        \ntype\n:\n \noverlay\n\n\n      \n}\n\n\n    \n}\n\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nParar \nCtrl+c\n y arrancar el tileserver utilizando el archivo de configuraci\u00f3n creado\n\n\n1\ntileserver-gl-light -c config.test.json -p \n8181\n\n\n\n\n\n\n\nModificar el archivo \nindex.html\n para que el visor de mapa para cargue los datos de Natural Earth con el nuevo estilo creado\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8181/styles/natural-earth-2/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml", 
            "title": "5. C\u00f3mo simbolizarlas"
        }, 
        {
            "location": "/5_estilos/#como-simbolizar-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo simbolizar teselas vectoriales"
        }, 
        {
            "location": "/5_estilos/#maputnik", 
            "text": "Es un editor visual gratuito y abierto para estilos Mapbox GL dirigidos tanto a desarrolladores como a dise\u00f1adores de mapas.  Se puede utilizar en l\u00ednea en  Maputnik editor  (todo se guarda en el almacenamiento local) \u00f3 se puede hacer una instalaci\u00f3n local.", 
            "title": "Maputnik"
        }, 
        {
            "location": "/5_estilos/#instalacion", 
            "text": "Si vamos a la p\u00e1gina de  Releases  de Maputnik aparece que la \u00faltima versi\u00f3n es la v1.0.2. Realmente existe una versi\u00f3n v1.1.0 que est\u00e1 en la p\u00e1gina de releases pero que no est\u00e1 marcada como la \u00faltima versi\u00f3n.  Descagaremos la versi\u00f3n v1.1.0 que es la \u00faltima versi\u00f3n disponible para la fecha de este taller.   1\n2 wget https://github.com/maputnik/editor/archive/v1.1.0.tar.gz\ntar -xzvf archivo.tar.gz   Vamos a la carpeta  editor-1.1.0  creada al descomprimir el archivo descargado he instalamos las dependencias del Maputnik  1\n2 cd  editor-1.1.0\nnpm install   Al finalizar la instalaci\u00f3n comprobamos que no aparezca ning\u00fan error (pueden aparecer algunos WARN) y arrancamos el servidor de Maputnik  1 npm start   Abrir el navegador y escribir  http://localhost:8888  y comprobar que aparece la p\u00e1gina del Maputnik   Maputnik", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/5_estilos/#estilizar-el-mbtiles", 
            "text": "Por defecto Maputnik nos", 
            "title": "Estilizar el mbtiles"
        }, 
        {
            "location": "/5_estilos/#agregar-un-origen-de-datos-source", 
            "text": "En el editor del Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Source  para desplegar el di\u00e1logo de gestionar fuentes de datos. En la parte inferior del di\u00e1logo esta el apartado para agregar una fuente nueva de datos  Add New Source . Para agregar nuestra fuente de datos mbtiles tenemos dos opciones.   Maputnik agregar origen de datos   Vector (TileJSON URL)   Source ID : identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos  natural_earth  Source Type : tipo de la fuente de datos. Seleccionar la opci\u00f3n de  Vector (TileJSON URL)  TileJSON URL : url del archivo JSON de descripci\u00f3n de la fuente. Pondremos la url de nuestro TileServerGL  http://localhost:8181/data/natural_earth.json   Vector (XYZ URL)   Source ID : identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos  natural_earth_1  Source Type : tipo de la fuente de datos. Seleccionar la opci\u00f3n de  Vector (XYZ URL)  TileJSON URL : url del servicio de teselas. Pondremos la url de nuestro TileServerGL  http://localhost:8181/data/natural_earth/{z}/{x}/{y}.pbf  Min Zoom : 0  Max Zoom : 5", 
            "title": "Agregar un origen de datos (Source)"
        }, 
        {
            "location": "/5_estilos/#agregar-sprite-y-glyph", 
            "text": "En el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Style Settings  para desplegar el di\u00e1logo de gestionar la configuraci\u00f3n del estilo.   Maputnik configuraci\u00f3n de estilo  Name : nombre del estilo. En nuestro caso pondremos  natural earth  Sprite URL : proporciona una plantilla para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de estilo del fondo, patrones de relleno, patrones de l\u00edneas e imagenes de iconos. En nuestro caso pondremos \" https://openmaptiles.github.io/osm-bright-gl-style/sprite \"  Glyphs URL : proporciona una plantilla para cargar conjuntos de glifos formato PBF. Aqu\u00ed es donde se cargan las diferentes fuentes. En nuestro caso pondremos \" https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo \"", 
            "title": "Agregar sprite y glyph"
        }, 
        {
            "location": "/5_estilos/#agregar-una-capa", 
            "text": "En el editor de Maputnik presionamos el bot\u00f3n de  Add Layer  para desplegar el di\u00e1logo de agregar capa al mapa.    Maputnik agregar capa  ID : identificador \u00fanico de la capa. Pondremos  oceanos  Type : tipo de capa. Seleccionar la opci\u00f3n de  Fill  ya que la capa es de tipo pol\u00edgono  Source : identificador del origen de datos. En nuestro caso pondremos  natural_earth  Source Layer : identificador de la capa dentro del origen de datos. Pondremos  ocean  para agregar la capa de los oc\u00e9anos.", 
            "title": "Agregar una capa"
        }, 
        {
            "location": "/5_estilos/#estilizar-una-capa-segun-un-campo", 
            "text": "En esta versi\u00f3n de maputnik (v1.1.0) no est\u00e1 implemantado el estilo  basado en expressiones . Se pueden utilizar los  stops  que actualmente estan  deprecated  para aplicar estilos seg\u00fan el nivel de zoom. En nuestro caso tendremos que utilizar filtros para poder estilizar una capa seg\u00fan un valor de un campo de texto.    Agregar la capa de lineas de Ferry. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  ferrys  Type :  Line  ya que la capa es de tipo l\u00ednea  Source :  natural_earth  Source Layer :  roads  para agregar la capa de carreteras que tambi\u00e9n contiena las lineas de ferry.    Vemos que aparecen todas las carreteras en el mapa.    Filtar la informaci\u00f3n. Selecci\u00f3n la capa de  ferrys  y en el apartado de Filter presionar el bot\u00f3n de  Add filter . En registro que aparece poner la siguiente informaci\u00f3n:     Maputnik agregar filtro a una capa  1\n2\n3\n4\n5 * Cambiar donde dice name por *type*\n\n* Dejar el selector de comparaci\u00f3n en *==*\n\n* Escribir en el campo de valor (que est\u00e1 vacio) *Ferry Route*   Comprobar que s\u00f3lo aparacen las l\u00edneas de Ferry en el mapa.   Question  Hacer lo mismo para agregar la capa de carreteras principales(Major Highway) y secundarias(Secondary Highway).", 
            "title": "Estilizar una capa seg\u00fan un campo"
        }, 
        {
            "location": "/5_estilos/#etiquetar-una-capa", 
            "text": "Agregar la capa de ciudades. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  ciudades_etiquetas  Type :  Symbol  ya que queremos que sea de tipo texto  Source :  natural_earth  Source Layer :  cities  para agregar la capa de ciudades.    Agregar el campo por el que se quiere etiquetar. Seleccionar la capa de  ciudades  y en el apartado de  Text layout properties  en el campo  Field  escribir  {nombre del campo} . En nuestro caso debemos escribir  {NAME} .    Estilizar las etiquetas. En el apartado de  Text paint properties  podemos definir el estilo de las etiquetas. Para los textos podemos definir un Halo para que el teto destaque mejor en nuestro mapa.", 
            "title": "Etiquetar una capa"
        }, 
        {
            "location": "/5_estilos/#utilizar-un-icono-para-simbolizar-nuestra-capa", 
            "text": "Agregar la capa de aeropuertos. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  aeropuertos  Type :  Symbol  ya que queremos que sea de tipo texto  Source :  natural_earth  Source Layer :  airports  para agregar la capa de aeropuertos.    Agregar el icono. Selecccionar la capa de  aeropuertos  y en el apartado de  Icon layout properties  escribir en el campo  Image   airport_11 . Este nombre debe coincidir con alguna imagen definida en el sprite.    Comprobar que aparecen los aeropuertos en el mapa     Tip  Aqui puede ver la lista de los nombres de las im\u00e1genes del sprite que estamos utilizando  https://github.com/openmaptiles/osm-bright-gl-style/tree/master/icons .", 
            "title": "Utilizar un icono para simbolizar nuestra capa"
        }, 
        {
            "location": "/5_estilos/#ejercicio", 
            "text": "Agregar y aplicar estilo al resto de capas del  natural_earth.mbtiles", 
            "title": "Ejercicio"
        }, 
        {
            "location": "/5_estilos/#exportar-el-estilo-creado", 
            "text": "En el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Export  para desplegar el di\u00e1logo de exportaci\u00f3n del estilo.  En el dialogo presionamos el boton de  Download  para descargar el estilo en nuestro ordenador.  Descargamos el archivo y lo renombramos a  natural_earth.json . Luego lo movemos a la carpeta  data  Dentro de la carpeta  data  crear un fichero  config.json . Para m\u00e1s detalles  http://tileserver.readthedocs.io/en/latest/config.html#   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 { \n   styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     } \n   }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Ejecutar el tileserver utilizando el archivo de configuraci\u00f3n creado  1 tileserver-gl-light -c config.test.json -p  8181    Abrir el navegador y escribir  http://localhost:8181 . Aparecer\u00e1 la p\u00e1gina del TileServer donde podemos comprobar nuestro estilo presionando el bot\u00f3n de  Vector  Modificar el archivo  index.html  para que el visor de mapa para cargue los datos de Natural Earth con el estilo creado en Maputnik   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8181/styles/natural-earth/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Exportar el estilo creado"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-datos-data-driven-style", 
            "text": "El estilo basado en datos le permite estilizar los datos en funci\u00f3n de sus propiedades. Por ejemplo, cambiar el radio de un c\u00edrculo en funci\u00f3n de la cantidad de clientes, cambiar el color de un pol\u00edgono de estado seg\u00fan la poblaci\u00f3n o usar la l\u00f3gica condicional para crear etiquetas biling\u00fces.  Para crear estilos basados en datos debemos usar las Mapbox GL JS expressions. En la especificaci\u00f3n de estilo de Mapbox, el valor de cualquier propiedad de dise\u00f1o, propiedad de estilo o filtro se puede especificar como una expresi\u00f3n. Las expresiones definen c\u00f3mo se combinan uno o m\u00e1s valores de propiedad y / o el nivel de zoom actual utilizando operaciones l\u00f3gicas, matem\u00e1ticas, de cadena o de color para producir el valor de propiedad de estilo apropiado o la decisi\u00f3n de filtro.  Para m\u00e1s informaci\u00f3n y ejemplos  https://www.mapbox.com/help/how-map-design-works/#data-driven-styles", 
            "title": "Estilo basado en datos (data-driven style)"
        }, 
        {
            "location": "/5_estilos/#crear-un-estilo-basado-en-datos", 
            "text": "Copiar el estilo  natural_earth.json  en un fichero llamado  natural_earth_2.json", 
            "title": "Crear un estilo basado en datos"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-valores-concretos-de-una-propiedad", 
            "text": "Editar el fichero  natural_earth_2.json  y eliminar las capas con id  secundarias ,  principales  y  ferrys  Entre la capa con id  land  y la capa con id  aeropuertos  crear una capa con id  roads . El color de las l\u00edneas de esta capa varia dependiendo del valor de la propiedad  type .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 { \n     id :   roads , \n     type :   line , \n     source :   local , \n     source-layer :   roads , \n     layout :   { \n         visibility :   visible \n     }, \n     paint :   { \n         line-color :   [ \n             match , \n             [ \n                 get , \n                 type \n             ], \n             Secondary Highway , \n             rgba(206, 32, 79, 1) , \n             Ferry Route , \n             rgba(138, 154, 241, 1) , \n             Major Highway , \n             rgba(20, 52, 232, 1) , \n             #000000 \n         ], \n         line-width :   2 \n     }  },", 
            "title": "Estilo basado en valores concretos de una propiedad"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-el-nivel-del-zoom", 
            "text": "Editar el fichero  natural_earth_2.json  modificar la capa  ciudades_etiquetas  para cambiar el tama\u00f1o del texto basado en el nivel de zoom del mapa y en la propiedad  SCALERANK   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 { \n     id :   ciudades_etiquetas , \n     type :   symbol , \n     source :   local , \n     source-layer :   cities , \n     layout :   { \n     symbol-placement :   point , \n     text-field :   {NAME} , \n     visibility :   visible , \n     text-anchor :   bottom , \n     text-offset :   [ 0 ,   - 1 ], \n     text-size :   [ \n         step , \n         [ zoom ], \n         [ \n         case , \n         [ \n             , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             3 \n         ], \n         18 , \n         0 \n         ], \n         5 , \n         [ \n         case , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             2 \n         ], \n         20 , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             5 \n         ], \n         14 , \n         10 \n         ], \n         8 , \n         [ \n         case , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             2 \n         ], \n         24 , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             5 \n         ], \n         18 , \n         14 \n         ] \n     ] \n     }, \n     paint :   { \n     text-halo-color :   rgba(253, 253, 253, 1) , \n     text-halo-width :   5 , \n     text-color :   rgba(16, 16, 16, 1) , \n     text-halo-blur :   2 \n     }  }", 
            "title": "Estilo basado en el nivel del zoom"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-una-propiedad", 
            "text": "Crear una capa con id  ciudades  y de tipo  circle  entre las capas  aeropuertos  y la capa  ciudades_etiquetas . En esta nueva capa el tama\u00f1o del circulo utilizar\u00e1 directamente el valor de la propiedad  SCALERANK   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 { \n     id :   ciudades , \n     type :   circle , \n     source :   local , \n     source-layer :   cities , \n     layout :   { \n     visibility :   visible \n     }, \n     paint :   { \n     circle-color :   [ \n         match , \n         [ get ,   ADM0CAP ], \n         0 , \n         hsl(285, 75%, 68%) , \n         hsl(0, 96%, 48%) \n     ], \n     circle-radius :   [ - ,   15 ,   [ get , SCALERANK ]] \n     }  },    Agregar el nuevo estilo al fichero de configuraci\u00f3n  config.json  del tileserver-gl   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 { \n   styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     },       natural-earth-2 :   {         style :   natural_earth_2.json ,         tilejson :   {           type :   overlay         }       }     }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Parar  Ctrl+c  y arrancar el tileserver utilizando el archivo de configuraci\u00f3n creado  1 tileserver-gl-light -c config.test.json -p  8181    Modificar el archivo  index.html  para que el visor de mapa para cargue los datos de Natural Earth con el nuevo estilo creado   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8181/styles/natural-earth-2/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Estilo basado en una propiedad"
        }, 
        {
            "location": "/6_servidor_dinamico/", 
            "text": "C\u00f3mo servir datos din\u00e1micos\n\n\nDescarga datos de edificios de OSM\n\n\nAbrimos en un navegador \nhttps://overpass-turbo.eu/\n. Situar la vista del mapa sobre una ciudad (en nuestro caso Barcelona) y copiar el siguiente c\u00f3digo.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n[out:json][timeout:25];\n\n\n// gather results\n\n\n(\n\n\n  way[\nbuilding\n=\nyes\n](\n{{\nbbox\n}}\n);\n\n\n);\n\n\n// print results\n\n\nout body;\n\n\n;\n\n\nout skel qt;\n\n\n\n\n\n\n\nExportar el resultado como GeoJSON y guardarlo en un fichero llamado \nbuildings.geojson\n\n\nCargar los datos en Postgis\n\n\nPara cargar los datos utilizaremos la librer\u00eda de GDAL/OGR con el siguiente comando\n\n\n1\nogr2ogr -s_srs EPSG:4326 -t_srs EPSG:3857 -overwrite -f \nPostgreSQL\n -nln public.building PG:\nhost=127.0.0.1 user=postgres password=postgres dbname=postgres\n buildings.geojson -lco \nGEOMETRY_NAME\n=\ngeom  -skipfailures", 
            "title": "6. C\u00f3mo servir datos din\u00e1micos"
        }, 
        {
            "location": "/6_servidor_dinamico/#como-servir-datos-dinamicos", 
            "text": "", 
            "title": "C\u00f3mo servir datos din\u00e1micos"
        }, 
        {
            "location": "/6_servidor_dinamico/#descarga-datos-de-edificios-de-osm", 
            "text": "Abrimos en un navegador  https://overpass-turbo.eu/ . Situar la vista del mapa sobre una ciudad (en nuestro caso Barcelona) y copiar el siguiente c\u00f3digo.  1\n2\n3\n4\n5\n6\n7\n8\n9 [out:json][timeout:25];  // gather results  (    way[ building = yes ]( {{ bbox }} );  );  // print results  out body;  ;  out skel qt;    Exportar el resultado como GeoJSON y guardarlo en un fichero llamado  buildings.geojson", 
            "title": "Descarga datos de edificios de OSM"
        }, 
        {
            "location": "/6_servidor_dinamico/#cargar-los-datos-en-postgis", 
            "text": "Para cargar los datos utilizaremos la librer\u00eda de GDAL/OGR con el siguiente comando  1 ogr2ogr -s_srs EPSG:4326 -t_srs EPSG:3857 -overwrite -f  PostgreSQL  -nln public.building PG: host=127.0.0.1 user=postgres password=postgres dbname=postgres  buildings.geojson -lco  GEOMETRY_NAME = geom  -skipfailures", 
            "title": "Cargar los datos en Postgis"
        }, 
        {
            "location": "/7_sprites_glyphs/", 
            "text": "Sprites y Glyphs\n\n\nSprites\n\n\n\n\nDefinici\u00f3n\n\n\nUn \nsprite\n es una imagen individual que contiene todos los iconos incluidos en un estilo. Los Sprites se utilizan a menudo en el desarrollo web e incluso en videojuegos para mejorar el rendimiento. Al combinar muchas im\u00e1genes peque\u00f1as en una sola imagen (sprite), puede reducir el n\u00famero de solicitudes necesarias para recuperar todas las im\u00e1genes, mejorar el rendimiento y hacer que su mapa sea m\u00e1s r\u00e1pido.\n\n\nLos Sprites pueden tener un tama\u00f1o m\u00e1ximo de 1024x1024 p\u00edxeles (2048x2048 para pantallas con alta DPI), lo que significa que el sprite completo que contiene todos los iconos debe tener un tama\u00f1o inferior a 1024x1024 p\u00edxeles. Cada sprite tiene un archivo JSON complementario que define cada icono, incluido el tama\u00f1o y la posici\u00f3n del icono dentro del sprite, como indicaciones para cada icono\n\n\nM\u00e1s informaci\u00f3n en \nhttps://www.mapbox.com/help/define-sprite/\n\n\n\n\nLa propiedad de \nsprite\n de un estilo proporciona una URL para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de las propiedades de estilo de fondo, patr\u00f3n de relleno, patr\u00f3n de l\u00ednea e imagen de icono.\n\n\nUna fuente de sprites v\u00e1lida debe suministrar dos tipos de archivos:\n\n\n\n\nIndice\n es un fichero JSON que contiene una descripci\u00f3n de cada imagen contenida en el sprite. El contenido de este archivo debe ser un objeto JSON cuyas claves forman identificadores para usar como valores de las propiedades de estilo anteriores, y cuyos valores son objetos que describen las dimensiones (ancho y propiedades de altura) y la proporci\u00f3n de p\u00edxeles (pixelRatio) de la imagen y su ubicaci\u00f3n dentro del sprite (x e y). Por ejemplo:\n\n\n\n\n1\n2\n{\naerialway-15\n:\n{\nwidth\n:\n15\n,\nheight\n:\n15\n,\nx\n:\n0\n,\ny\n:\n0\n,\npixelRatio\n:\n1\n},\n\n\nairfield-15\n:\n{\nwidth\n:\n15\n,\nheight\n:\n15\n,\nx\n:\n15\n,\ny\n:\n0\n,\npixelRatio\n:\n1\n}}\n\n\n\n\n\n\n\n\n\nImagen\n fichero PNG que contiene los datos del sprite. Por ejemplo:\n\n\n\n\n\n\nC\u00f3mo crear tus propios sprites\n\n\nPara crear los sprites hay que crear ambos archivo el JSON de indice y el PNG que contiene todas las im\u00e1genes, esto de se puede hacer manualmente con un editor de texto y en editor de im\u00e1genes, pero el proceso es lento y laborioso. \n\n\nLo mejor es buscar alg\u00fan generador de sprites, en la web se pueden encontrar m\u00faltiples generadores de sprites para usar en la web que generar el archivo PNG y un archivo CSS que cumple la funci\u00f3n del archivo de indice. Para los mapas con mapbox gl el archivo css no sirve ya que necesitamos el archivo JSON.\n\n\nPara generar sprites basados en ficheros SVG podemos utilizar \nhttps://github.com/gencat/ICGC-createsprites\n un script de Nodejs basado en la librer\u00eda de Mapbox \nspritezero\n que permite generar sprites en @2x y de mayor resoluci\u00f3n para usar en pantallas retina, etc.\n\n\nGlyphs\n\n\nLa propiedad de \nglyphs\n de un estilo proporciona una plantilla de URL para cargar conjuntos de glifos en formato PBF. Sirve para cargar las diferentes fuentes que se utilizar en el mapa. Ejemplo\n\n\n1\nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf\n\n\n\n\n\n\nEsta plantilla de URL debe incluir dos tokens:\n\n\n\n\n\n\n{fontstack}\n Cuando se solicitan glifos, este token se reemplaza con una lista de fuentes separadas por comas de una pila de fuentes especificada en la propiedad de fuente de texto de una capa de s\u00edmbolo.\n\n\n\n\n\n\n{rango}\n Cuando se solicitan glifos, este token se reemplaza con un rango de 256 puntos de c\u00f3digo Unicode. Los rangos reales que se cargan se determinan en tiempo de ejecuci\u00f3n seg\u00fan el texto que se debe mostrar.\n\n\n\n\n\n\nC\u00f3mo crear tus propios glyphs\n\n\nTODO\n\n\nPuede ser una combinaci\u00f3n de \nhttps://github.com/openmaptiles/fonts\n para crear los pbf y de \nhttps://github.com/gencat/ICGC-fonticon-generator\n para generar la fuente desde SVGs\n\n\nC\u00f3mo utilizar los sprites y glyphs en el estilo\n\n\nEn el fichero de estilo indicar la URL tanto de los sprites como de los glyphs.\n\n\n25\n26\nsprite\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/sprite\n,\n\n\nglyphs\n:\n \nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n,\n\n\n\n\n\n\n\nUtilizar sprites propios\n\n\nPara descargar los archivos de sprites escribiremos lo siguiente en nuestro terminal\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmkdir sprites\n\ncd\n sprites\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.png\n\n\n\n\n\n\nIr a la carpeta de data \n\n\n1\ncd\n ..\n\n\n\n\n\n\nModificar el fichero \nconfig.json\n del tileserver-gl para agregar la ruta donde se encuentran los sprites\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n{\n\n\n  \noptions\n:\n{\n\n\n    \npaths\n:\n{\n\n\n      \nsprites\n:\n \nsprites\n\n\n    \n}\n\n\n  \n},\n\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n},\n\n    \nnatural-earth-2\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth_2.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nModificar el fichero \nnatural_earth_2.json\n para cargar los sprites propios. En este caso cargaremos los sprites con resoluci\u00f3n para retina.\n\n\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n.....\n\n\nsources\n:\n \n{\n\n    \nlocal\n:\n \n{\n\n      \ntype\n:\n \nvector\n,\n\n      \nurl\n:\n \nhttp://localhost:8181/data/natural_earth.json\n\n    \n}\n\n  \n},\n\n\n  \nsprite\n:\n \nsprite@2\n,\n\n\n  \nglyphs\n:\n \nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n,\n\n  \nlayers\n:\n \n[\n\n    \n{\n\n \n.....\n\n\n\n\n\n\n\nReiniciar el tileserver-gl Ctrl+c\n\n\n1\ntileserver-gl-light config.json -p \n8181", 
            "title": "7. Sprites y Glyphs"
        }, 
        {
            "location": "/7_sprites_glyphs/#sprites-y-glyphs", 
            "text": "", 
            "title": "Sprites y Glyphs"
        }, 
        {
            "location": "/7_sprites_glyphs/#sprites", 
            "text": "Definici\u00f3n  Un  sprite  es una imagen individual que contiene todos los iconos incluidos en un estilo. Los Sprites se utilizan a menudo en el desarrollo web e incluso en videojuegos para mejorar el rendimiento. Al combinar muchas im\u00e1genes peque\u00f1as en una sola imagen (sprite), puede reducir el n\u00famero de solicitudes necesarias para recuperar todas las im\u00e1genes, mejorar el rendimiento y hacer que su mapa sea m\u00e1s r\u00e1pido.  Los Sprites pueden tener un tama\u00f1o m\u00e1ximo de 1024x1024 p\u00edxeles (2048x2048 para pantallas con alta DPI), lo que significa que el sprite completo que contiene todos los iconos debe tener un tama\u00f1o inferior a 1024x1024 p\u00edxeles. Cada sprite tiene un archivo JSON complementario que define cada icono, incluido el tama\u00f1o y la posici\u00f3n del icono dentro del sprite, como indicaciones para cada icono  M\u00e1s informaci\u00f3n en  https://www.mapbox.com/help/define-sprite/   La propiedad de  sprite  de un estilo proporciona una URL para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de las propiedades de estilo de fondo, patr\u00f3n de relleno, patr\u00f3n de l\u00ednea e imagen de icono.  Una fuente de sprites v\u00e1lida debe suministrar dos tipos de archivos:   Indice  es un fichero JSON que contiene una descripci\u00f3n de cada imagen contenida en el sprite. El contenido de este archivo debe ser un objeto JSON cuyas claves forman identificadores para usar como valores de las propiedades de estilo anteriores, y cuyos valores son objetos que describen las dimensiones (ancho y propiedades de altura) y la proporci\u00f3n de p\u00edxeles (pixelRatio) de la imagen y su ubicaci\u00f3n dentro del sprite (x e y). Por ejemplo:   1\n2 { aerialway-15 : { width : 15 , height : 15 , x : 0 , y : 0 , pixelRatio : 1 },  airfield-15 : { width : 15 , height : 15 , x : 15 , y : 0 , pixelRatio : 1 }}     Imagen  fichero PNG que contiene los datos del sprite. Por ejemplo:", 
            "title": "Sprites"
        }, 
        {
            "location": "/7_sprites_glyphs/#como-crear-tus-propios-sprites", 
            "text": "Para crear los sprites hay que crear ambos archivo el JSON de indice y el PNG que contiene todas las im\u00e1genes, esto de se puede hacer manualmente con un editor de texto y en editor de im\u00e1genes, pero el proceso es lento y laborioso.   Lo mejor es buscar alg\u00fan generador de sprites, en la web se pueden encontrar m\u00faltiples generadores de sprites para usar en la web que generar el archivo PNG y un archivo CSS que cumple la funci\u00f3n del archivo de indice. Para los mapas con mapbox gl el archivo css no sirve ya que necesitamos el archivo JSON.  Para generar sprites basados en ficheros SVG podemos utilizar  https://github.com/gencat/ICGC-createsprites  un script de Nodejs basado en la librer\u00eda de Mapbox  spritezero  que permite generar sprites en @2x y de mayor resoluci\u00f3n para usar en pantallas retina, etc.", 
            "title": "C\u00f3mo crear tus propios sprites"
        }, 
        {
            "location": "/7_sprites_glyphs/#glyphs", 
            "text": "La propiedad de  glyphs  de un estilo proporciona una plantilla de URL para cargar conjuntos de glifos en formato PBF. Sirve para cargar las diferentes fuentes que se utilizar en el mapa. Ejemplo  1 https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf   Esta plantilla de URL debe incluir dos tokens:    {fontstack}  Cuando se solicitan glifos, este token se reemplaza con una lista de fuentes separadas por comas de una pila de fuentes especificada en la propiedad de fuente de texto de una capa de s\u00edmbolo.    {rango}  Cuando se solicitan glifos, este token se reemplaza con un rango de 256 puntos de c\u00f3digo Unicode. Los rangos reales que se cargan se determinan en tiempo de ejecuci\u00f3n seg\u00fan el texto que se debe mostrar.", 
            "title": "Glyphs"
        }, 
        {
            "location": "/7_sprites_glyphs/#como-crear-tus-propios-glyphs", 
            "text": "", 
            "title": "C\u00f3mo crear tus propios glyphs"
        }, 
        {
            "location": "/7_sprites_glyphs/#todo", 
            "text": "Puede ser una combinaci\u00f3n de  https://github.com/openmaptiles/fonts  para crear los pbf y de  https://github.com/gencat/ICGC-fonticon-generator  para generar la fuente desde SVGs", 
            "title": "TODO"
        }, 
        {
            "location": "/7_sprites_glyphs/#como-utilizar-los-sprites-y-glyphs-en-el-estilo", 
            "text": "En el fichero de estilo indicar la URL tanto de los sprites como de los glyphs.  25\n26 sprite :   https://openmaptiles.github.io/osm-bright-gl-style/sprite ,  glyphs :   https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo ,", 
            "title": "C\u00f3mo utilizar los sprites y glyphs en el estilo"
        }, 
        {
            "location": "/7_sprites_glyphs/#utilizar-sprites-propios", 
            "text": "Para descargar los archivos de sprites escribiremos lo siguiente en nuestro terminal  1\n2\n3\n4\n5\n6\n7\n8 mkdir sprites cd  sprites\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.png   Ir a la carpeta de data   1 cd  ..   Modificar el fichero  config.json  del tileserver-gl para agregar la ruta donde se encuentran los sprites   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 {     options : {       paths : {         sprites :   sprites       }     },     styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     }, \n     natural-earth-2 :   { \n       style :   natural_earth_2.json , \n       tilejson :   { \n         type :   overlay \n       } \n     } \n   }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Modificar el fichero  natural_earth_2.json  para cargar los sprites propios. En este caso cargaremos los sprites con resoluci\u00f3n para retina.  18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 .....  sources :   { \n     local :   { \n       type :   vector , \n       url :   http://localhost:8181/data/natural_earth.json \n     } \n   },     sprite :   sprite@2 ,     glyphs :   https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo , \n   layers :   [ \n     { \n  .....    Reiniciar el tileserver-gl Ctrl+c  1 tileserver-gl-light config.json -p  8181", 
            "title": "Utilizar sprites propios"
        }, 
        {
            "location": "/x_markdown/", 
            "text": "Markdown\n\n\nT\u00edtulo 2\n\n\nT\u00edtulo 3\n\n\nT\u00edtulo 4\n\n\nTexto en \ncursiva\n, \nnegrita\n, \ncursiva y negrita\n.\n\n\nLista desordenada:\n\n\n\n\nLista\n\n\nDesordenada\n\n\n\n\nLista ordenada:\n\n\n\n\nLista\n\n\nOrdenada\n\n\n(Da igual el n\u00famero que pongas)\n\n\n\n\nEsto es un \nenlace\n.\n\n\nLo siguiente es una imagen:\n\n\n\n\nUn comando: \nnpm install\n.\n\n\nUn bloque de c\u00f3digo coloreado (especificar formato, casi cualquiera est\u00e1 soportado):\n\n\n1\n2\n3\n4\n{\n\n    \nkey\n:\n \nvalue\n,\n\n    \nnumbers\n:\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n}\n\n\n\n\n\n\n\nY una tabla:\n\n\n\n\n\n\n\n\nHeader 1\n\n\nHeader 2\n\n\n\n\n\n\n\n\n\n\nTal y\n\n\nCual\n\n\n\n\n\n\nFulanito\n\n\nMenganito", 
            "title": "(chuleta markdown)"
        }, 
        {
            "location": "/x_markdown/#markdown", 
            "text": "", 
            "title": "Markdown"
        }, 
        {
            "location": "/x_markdown/#titulo-2", 
            "text": "", 
            "title": "T\u00edtulo 2"
        }, 
        {
            "location": "/x_markdown/#titulo-3", 
            "text": "", 
            "title": "T\u00edtulo 3"
        }, 
        {
            "location": "/x_markdown/#titulo-4", 
            "text": "Texto en  cursiva ,  negrita ,  cursiva y negrita .  Lista desordenada:   Lista  Desordenada   Lista ordenada:   Lista  Ordenada  (Da igual el n\u00famero que pongas)   Esto es un  enlace .  Lo siguiente es una imagen:   Un comando:  npm install .  Un bloque de c\u00f3digo coloreado (especificar formato, casi cualquiera est\u00e1 soportado):  1\n2\n3\n4 { \n     key :   value , \n     numbers :   [ 1 ,   2 ,   3 ]  }    Y una tabla:     Header 1  Header 2      Tal y  Cual    Fulanito  Menganito", 
            "title": "T\u00edtulo 4"
        }
    ]
}