{
    "docs": [
        {
            "location": "/", 
            "text": "Trabajando con teselas vectoriales\n\n\nBienvenidos al taller de teselas vectoriales. Este manual est\u00e1 publicado aqu\u00ed:\n\n\nhttps://geoinquiets.github.io/taller-vt/\n\n\nEsenciales para moverse por OSGeo Live\n\n\n\n\nUsuario: \"user\"\n\n\nPassword: \"user\"\n\n\nAlt + F2\n Para lanzar un programa de forma r\u00e1pida\n\n\nShift + Ctrl + V\n para pegar un texto del portapapeles en el terminal\n\n\n\n\nDescarga de los materiales para el taller\n\n\n1\n2\n3\n4\n5\ncd\n Desktop\nwget https://geoinquiets.github.io/taller-vt/downloads/taller-vt.zip\nunzip taller-vt.zip\n\ncd\n taller-vt\nll\n\n\n\n\n\n\nAs\u00ed pues, la ruta \n~/Desktop/taller-vt\n ser\u00e1 nuestro directorio base, donde iremos creando los recursos necesarios.\nDe momento tenemos los subdirectorios:\n\n\n\n\ndatos\n\n\nmaputnik\n\n\n\n\nComprobaci\u00f3n del software preinstalado\n\n\n\n\nAlt + F2\n =\n \"terminator\" deber\u00eda abrir un terminal.\n\n\ngoogle-chrome http://tileserver.fonts.cat/styles/dark-matter/style.json\n deber\u00eda abrir Chrome y mostrar un JSON formateado y coloreado.\n\n\ngoogle-chrome http://tileserver.fonts.cat/styles/dark-matter-3d/?vector#16.09/41.3861/2.19226/-47.2/60\n deber\u00eda mostrar un mapa de Barcelona con edificios en 3D, y moverse con soltura.\n\n\nnode -v\n Deber\u00eda ser 6.x.x (NO mayor que 6, si aparece 8.x.x o 10.x.x, hay que cambiar de versi\u00f3n)\n\n\nnpm -v\n\n\ncode -v\n\n\ntippecanoe -v\n\n\n\n\nEn caso de que falte alguno, se pueden consultar las instrucciones de instalaci\u00f3n a continuaci\u00f3n.\n\n\nExtra: Instalaci\u00f3n de requisitos de software\n\n\nEl software de base para el taller ya est\u00e1 instalado en los ordenadores del aula, pero indicamos aqu\u00ed c\u00f3mo instalarlo\ntomando como base OSGeo Live 11 (tambi\u00e9n valdr\u00e1 para Ubuntu 16.04).\n\n\n\n\nGoogle Chrome\n\n\nLa extensi\u00f3n \njson-viewer\n en Chrome\n\n\nMicrosoft Visual Studio Code\n\n\nTerminator:\n    \n1\nsudo apt install terminator\n\n\n\n\n\n\n\nnode6 y npm (sobre nvm):\n\n\nPrimero, instalar nvm:\n\n\n1\n  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh \n|\n bash\n\n\n\n\n\n\nCerrar y reabrir el terminal.\nLuego, instalar node 6 y npm:\n\n\n1\n2\n3\n4\n5\n  nvm install 6\n  npm install -g npm\n  # comprobar versiones\n  node -v # Deber\u00eda ser 6.x.x\n  npm -v # Deber\u00eda ser 6.x.x o mayor\n\n\n\n\n\n\n\n\n\n\ntippecanoe:\n\n\nInstalar dependencias (librer\u00edas sqlite3 y zlib):\n\n\n1\nsudo apt install build-essential libsqlite3-dev zlib1g-dev\n\n\n\n\n\n\nBajarse el c\u00f3digo fuente:\n\n\n1\n2\ngit clone https://github.com/mapbox/tippecanoe.git\n\ncd\n tippecanoe\n\n\n\n\n\n\nCompilar:\n\n\n1\n2\nmake -j\nsudo make install\n\n\n\n\n\n\nComprobar la instalaci\u00f3n:\n\n\n1\ntippecanoe -v \n# Devolver\u00e1, por ejemplo, v1.29.0\n\n\n\n\n\n\n\nUna vez instalado el ejecutable, podemos borrar el c\u00f3digo fuente:\n\n\n1\n2\ncd\n ..\nrm -rf tippecanoe\n\n\n\n\n\n\n\n\n\n\n\n\nDanger\n\n\nTodo el taller se basa en tener un navegador con capacidades WebGL, que deber\u00eda\n poder moverse R\u00c1PIDO.\n\n\n\n\nComprobar que al abrirse esta p\u00e1gina, se ve un mapa de Barcelona con edificios:\n\nhttp://tileserver.fonts.cat/styles/dark-matter-3d/?vector#16.09/41.3861/2.19226/-47.2/60\n\n\nComprobar que el mapa se mueve con soltura.\n\n\nSi no se puede correr el SO nativo (ser\u00eda lo ideal), ajustar la configuraci\u00f3n\nde VirtualBox para tener activadas las opciones:\n\n\nSystem \n Processor \n \"Enable PAE/NX\"\n\n\nDisplay \n Screen \n Aumentar MB disponibles para la tarjeta gr\u00e1fica.\n\n\nDisplay \n Screen \n \"Enable 3D acceleration\".\n\n\nTener instaladas las \"VirtualBox Guest Additions\" en la m\u00e1quina virtual.\n\n\n\n\n\n\n\n\n\n\nRecursos adicionales\n\n\nMayormente de \nRaf\n, nuestra fuente diaria de vitaminas, v\u00eda \nGeoinquiets\n. \n\n\n\n\nAwesome Vector Tiles\n \n\n\nNatural Earth Vector Tiles by Lukas Martinelli\n\n\nTutorial de los Geoinquietos de Londres\n\n\nTilemaker, de OSM a mbtiles de una tacada\n\n\nQu\u00e9 son las teselas vectoriales (vector tiles) y c\u00f3mo generarlos con PostGIS / GeoServer\n\n\nNatural Earth Quickstart Style implemented with Tegola\n\n\nGeoServer MBStyle Cookbook\n\n\nGeoServer MBStyle Styling Workbook", 
            "title": "Home"
        }, 
        {
            "location": "/#trabajando-con-teselas-vectoriales", 
            "text": "Bienvenidos al taller de teselas vectoriales. Este manual est\u00e1 publicado aqu\u00ed:", 
            "title": "Trabajando con teselas vectoriales"
        }, 
        {
            "location": "/#httpsgeoinquietsgithubiotaller-vt", 
            "text": "", 
            "title": "https://geoinquiets.github.io/taller-vt/"
        }, 
        {
            "location": "/#esenciales-para-moverse-por-osgeo-live", 
            "text": "Usuario: \"user\"  Password: \"user\"  Alt + F2  Para lanzar un programa de forma r\u00e1pida  Shift + Ctrl + V  para pegar un texto del portapapeles en el terminal", 
            "title": "Esenciales para moverse por OSGeo Live"
        }, 
        {
            "location": "/#descarga-de-los-materiales-para-el-taller", 
            "text": "1\n2\n3\n4\n5 cd  Desktop\nwget https://geoinquiets.github.io/taller-vt/downloads/taller-vt.zip\nunzip taller-vt.zip cd  taller-vt\nll   As\u00ed pues, la ruta  ~/Desktop/taller-vt  ser\u00e1 nuestro directorio base, donde iremos creando los recursos necesarios.\nDe momento tenemos los subdirectorios:   datos  maputnik", 
            "title": "Descarga de los materiales para el taller"
        }, 
        {
            "location": "/#comprobacion-del-software-preinstalado", 
            "text": "Alt + F2  =  \"terminator\" deber\u00eda abrir un terminal.  google-chrome http://tileserver.fonts.cat/styles/dark-matter/style.json  deber\u00eda abrir Chrome y mostrar un JSON formateado y coloreado.  google-chrome http://tileserver.fonts.cat/styles/dark-matter-3d/?vector#16.09/41.3861/2.19226/-47.2/60  deber\u00eda mostrar un mapa de Barcelona con edificios en 3D, y moverse con soltura.  node -v  Deber\u00eda ser 6.x.x (NO mayor que 6, si aparece 8.x.x o 10.x.x, hay que cambiar de versi\u00f3n)  npm -v  code -v  tippecanoe -v   En caso de que falte alguno, se pueden consultar las instrucciones de instalaci\u00f3n a continuaci\u00f3n.", 
            "title": "Comprobaci\u00f3n del software preinstalado"
        }, 
        {
            "location": "/#extra-instalacion-de-requisitos-de-software", 
            "text": "El software de base para el taller ya est\u00e1 instalado en los ordenadores del aula, pero indicamos aqu\u00ed c\u00f3mo instalarlo\ntomando como base OSGeo Live 11 (tambi\u00e9n valdr\u00e1 para Ubuntu 16.04).   Google Chrome  La extensi\u00f3n  json-viewer  en Chrome  Microsoft Visual Studio Code  Terminator:\n     1 sudo apt install terminator    node6 y npm (sobre nvm):  Primero, instalar nvm:  1   curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh  |  bash   Cerrar y reabrir el terminal.\nLuego, instalar node 6 y npm:  1\n2\n3\n4\n5   nvm install 6\n  npm install -g npm\n  # comprobar versiones\n  node -v # Deber\u00eda ser 6.x.x\n  npm -v # Deber\u00eda ser 6.x.x o mayor     tippecanoe:  Instalar dependencias (librer\u00edas sqlite3 y zlib):  1 sudo apt install build-essential libsqlite3-dev zlib1g-dev   Bajarse el c\u00f3digo fuente:  1\n2 git clone https://github.com/mapbox/tippecanoe.git cd  tippecanoe   Compilar:  1\n2 make -j\nsudo make install   Comprobar la instalaci\u00f3n:  1 tippecanoe -v  # Devolver\u00e1, por ejemplo, v1.29.0    Una vez instalado el ejecutable, podemos borrar el c\u00f3digo fuente:  1\n2 cd  ..\nrm -rf tippecanoe      Danger  Todo el taller se basa en tener un navegador con capacidades WebGL, que deber\u00eda\n poder moverse R\u00c1PIDO.   Comprobar que al abrirse esta p\u00e1gina, se ve un mapa de Barcelona con edificios: http://tileserver.fonts.cat/styles/dark-matter-3d/?vector#16.09/41.3861/2.19226/-47.2/60  Comprobar que el mapa se mueve con soltura.  Si no se puede correr el SO nativo (ser\u00eda lo ideal), ajustar la configuraci\u00f3n\nde VirtualBox para tener activadas las opciones:  System   Processor   \"Enable PAE/NX\"  Display   Screen   Aumentar MB disponibles para la tarjeta gr\u00e1fica.  Display   Screen   \"Enable 3D acceleration\".  Tener instaladas las \"VirtualBox Guest Additions\" en la m\u00e1quina virtual.", 
            "title": "Extra: Instalaci\u00f3n de requisitos de software"
        }, 
        {
            "location": "/#recursos-adicionales", 
            "text": "Mayormente de  Raf , nuestra fuente diaria de vitaminas, v\u00eda  Geoinquiets .    Awesome Vector Tiles    Natural Earth Vector Tiles by Lukas Martinelli  Tutorial de los Geoinquietos de Londres  Tilemaker, de OSM a mbtiles de una tacada  Qu\u00e9 son las teselas vectoriales (vector tiles) y c\u00f3mo generarlos con PostGIS / GeoServer  Natural Earth Quickstart Style implemented with Tegola  GeoServer MBStyle Cookbook  GeoServer MBStyle Styling Workbook", 
            "title": "Recursos adicionales"
        }, 
        {
            "location": "/1_teoria/", 
            "text": "Qu\u00e9 son las teselas vectoriales\n\n\nTODO\n\n\n\n\nConcepto te\u00f3rico, diferencias con \"raster\" tiles y con formatos vectoriales existentes.\n\n\nPresentaci\u00f3n de ejemplos visuales hechos con vt\n\n\nExponer esquema general de lo que se va a hacer en el taller.\n\n\nPresentar las diferentes especificaciones: mbtiles, vt, pbf, tilejson, style, sprites, glyphs.", 
            "title": "1. Qu\u00e9 son"
        }, 
        {
            "location": "/1_teoria/#que-son-las-teselas-vectoriales", 
            "text": "TODO   Concepto te\u00f3rico, diferencias con \"raster\" tiles y con formatos vectoriales existentes.  Presentaci\u00f3n de ejemplos visuales hechos con vt  Exponer esquema general de lo que se va a hacer en el taller.  Presentar las diferentes especificaciones: mbtiles, vt, pbf, tilejson, style, sprites, glyphs.", 
            "title": "Qu\u00e9 son las teselas vectoriales"
        }, 
        {
            "location": "/2_visor_simple/", 
            "text": "C\u00f3mo visualizar teselas vectoriales\n\n\nServidor web\n\n\nPara ver las aplicaciones que desarrollaremos durante el taller necesitamos publicarlas mediante un servidor web.\nEn nuestro caso usaremos \nlive-server\n, que permite servir los contenidos de un directorio y recargar la p\u00e1gina\nautom\u00e1ticamente cuando se modifica el contenido de alg\u00fan fichero.\n\n\nPara instalarlo, se usar\u00e1 el comando:\n\n\n1\nsudo npm install -g live-server\n\n\n\n\n\n\nPara arrancarlo, basta con situarse en el directorio que queramos servir y ejecutar:\n\n\n1\n2\n3\nmkdir taller-vt\n\ncd\n taller-vt\nlive-server\n\n\n\n\n\n\nSe abrir\u00e1 el navegador por defecto con la direcci\u00f3n \nhttp://127.0.0.1:8080/\n\ny se mostrar\u00e1 el contenido del directorio para poder navegar por \u00e9l.\n\n\nDeja la ventana del terminal abierta, y usa la combinaci\u00f3n de teclas \nCtrl\n + \nC\n para parar el servidor.\n\n\nHola Mundo\n\n\nVamos a crear un fichero \nbarcelona.html\n.\n\n\nAbre una nueva ventana de terminal (recuerda dejar el servidor activo) y ejecuta Visual Studio Code\n(o el editor que prefieras):\n\n\n1\ncode .\n\n\n\n\n\n\nCrea un fichero \nbarcelona.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n    \n#x1f596;\n \n#x1f30d;\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nRecargar la p\u00e1gina \nhttp://127.0.0.1:8080/\n en el navegador. Se deber\u00eda ver un \"Hola mundo\".\n\n\nHola Mapa\n\n\nEn este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS.\nTanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para\nsimbolizar los mismos se encuentran en la red.\n\n\nModificar el archivo \nbarcelona.html\n para que contenga el siguiente c\u00f3digo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n\n    \nstyle\n\n\n        \nhtml\n,\n \nbody\n \n{\n\n\n            \nmargin\n:\n \n0\n;\n\n\n            \nheight\n:\n \n100\n%\n;\n\n\n        \n}\n\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n\n    \n});\n\n\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\n\nResultado visor simple\n\n\nInspector de datos\n\n\nEl control \nmapbox-gl-inspect\n permite ver todos los elementos\nde un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.\n\n\nAgregar el c\u00f3digo de la librer\u00eda, e instanciar el control tras crear el mapa:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n        \nstyle\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nSe recargar\u00e1 la p\u00e1gina en el navegador con un nuevo bot\u00f3n que permite la \"visi\u00f3n de rayos X\" sobre los datos.\n\n\n\nResultado visor simple\n\n\nContenido de un fichero de estilo\n\n\nComo vemos, el visor es muy sencillo, y parece que toda la \"magia\" se esconde en el fichero de estilo tras la URL\n\nhttps://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json\n.\n\n\nSi lo abrimos, es un objeto JSON bastante complejo, pero si nos fijamos en las propiedades de primer nivel, son pocas.\nLas principales: \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n  \nversion\n:\n \n8\n,\n\n  \nname\n:\n \nOSM Bright\n,\n\n  \nsprite\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/sprite\n,\n\n  \nglyphs\n:\n \nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n,\n\n  \nsources\n:\n \n{\n...\n},\n\n  \nlayers\n:\n \n[\n...\n]\n\n\n}\n\n\n\n\n\n\n\n\n\nversion\n es obligatoria y siempre es 8.\n\n\nname\n es opcional pero conveniente, es una etiqueta para mostrar el nombre del estilo. \n\n\nsprite\n indica de d\u00f3nde obtener el conjunto de \niconos\n necesarios para simbolizar.\n\n\nglyphs\n: indica de d\u00f3nde obtener el conjunto de \ntipograf\u00edas\n necesarios para simbolizar.\n\n\nsources\n: los or\u00edgenes de datos.\n\n\nlayers\n: las reglas de simbolizaci\u00f3n. El orden es importante: Se van dibujando de la primera (que queda por debajo)\na la \u00faltima (que queda por encima). As\u00ed, la primera regla suele ser el color de fondo del mapa, y las \u00faltimas suelen\nser la toponimia o los PoIs.\n\n\n\n\nEn los pr\u00f3ximos cap\u00edtulos veremos en detalle c\u00f3mo usar \nsources\n, \nlayers\n, \nsprites\n y \nglyphs\n.\n\n\nHabitualmente tambi\u00e9n se usan otras propiedades para indicar la vista inicial del mapa. Por ejemplo:\n\n\n1\n2\n3\n4\n5\n6\n7\n{\n\n  \n...\n\n  \ncenter\n:\n \n[\n2.15\n,\n \n41.39\n],\n\n  \nzoom\n:\n \n12\n,\n\n  \nbearing\n:\n \n-45\n,\n\n  \npitch\n:\n \n0\n\n\n}\n\n\n\n\n\n\n\n\n\ncenter\n: Coordenadas iniciales donde centrar el mapa [lon, lat]\n\n\nzoom\n: Zoom inicial del mapa\n\n\nbearing\n: Rotaci\u00f3n inicial del mapa (en grados)\n\n\npitch\n: Inclinaci\u00f3n inicial del mapa para verlo en perspectiva (de 0 a 60 grados)\n\n\n\n\n\n\nTip\n\n\nLa especificaci\u00f3n completa del fichero de estilo es parte de la \ndocumentaci\u00f3n on-line de Mapbox GL\nJS\n.", 
            "title": "2. C\u00f3mo visualizarlas"
        }, 
        {
            "location": "/2_visor_simple/#como-visualizar-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo visualizar teselas vectoriales"
        }, 
        {
            "location": "/2_visor_simple/#servidor-web", 
            "text": "Para ver las aplicaciones que desarrollaremos durante el taller necesitamos publicarlas mediante un servidor web.\nEn nuestro caso usaremos  live-server , que permite servir los contenidos de un directorio y recargar la p\u00e1gina\nautom\u00e1ticamente cuando se modifica el contenido de alg\u00fan fichero.  Para instalarlo, se usar\u00e1 el comando:  1 sudo npm install -g live-server   Para arrancarlo, basta con situarse en el directorio que queramos servir y ejecutar:  1\n2\n3 mkdir taller-vt cd  taller-vt\nlive-server   Se abrir\u00e1 el navegador por defecto con la direcci\u00f3n  http://127.0.0.1:8080/ \ny se mostrar\u00e1 el contenido del directorio para poder navegar por \u00e9l.  Deja la ventana del terminal abierta, y usa la combinaci\u00f3n de teclas  Ctrl  +  C  para parar el servidor.", 
            "title": "Servidor web"
        }, 
        {
            "location": "/2_visor_simple/#hola-mundo", 
            "text": "Vamos a crear un fichero  barcelona.html .  Abre una nueva ventana de terminal (recuerda dejar el servidor activo) y ejecuta Visual Studio Code\n(o el editor que prefieras):  1 code .   Crea un fichero  barcelona.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title  / head  body   id = map \n     #x1f596;   #x1f30d;  / body  / html    Recargar la p\u00e1gina  http://127.0.0.1:8080/  en el navegador. Se deber\u00eda ver un \"Hola mundo\".", 
            "title": "Hola Mundo"
        }, 
        {
            "location": "/2_visor_simple/#hola-mapa", 
            "text": "En este primer ejemplo crearemos un visor de mapas utilizando la librer\u00eda de Mapbox GL JS.\nTanto los datos procedente de teselas vectoriales \u00f3 vector tiles (VT) como el estilo para\nsimbolizar los mismos se encuentran en la red.  Modificar el archivo  barcelona.html  para que contenga el siguiente c\u00f3digo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title       link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   /       script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script       style           html ,   body   {               margin :   0 ;               height :   100 % ;           }       / style  / head  body   id = map  script       var   map   =   new   mapboxgl . Map ({           container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial           zoom :   13 ,   // Zoom inicial           bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial           hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL       });        // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:       map . addControl ( new   mapboxgl . NavigationControl ());  / script  / body  / html    \nResultado visor simple", 
            "title": "Hola Mapa"
        }, 
        {
            "location": "/2_visor_simple/#inspector-de-datos", 
            "text": "El control  mapbox-gl-inspect  permite ver todos los elementos\nde un VT y tambi\u00e9n permite pasar el cursor sobre los elementos para ver sus propiedades.  Agregar el c\u00f3digo de la librer\u00eda, e instanciar el control tras crear el mapa:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script       link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   /       script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script       style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa \n         style :   https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json ,   // Ubicaci\u00f3n del estilo \n         center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ());       // Agregar el control de inspecci\u00f3n       map . addControl ( new   MapboxInspect ());  / script  / body  / html    Se recargar\u00e1 la p\u00e1gina en el navegador con un nuevo bot\u00f3n que permite la \"visi\u00f3n de rayos X\" sobre los datos.  \nResultado visor simple", 
            "title": "Inspector de datos"
        }, 
        {
            "location": "/2_visor_simple/#contenido-de-un-fichero-de-estilo", 
            "text": "Como vemos, el visor es muy sencillo, y parece que toda la \"magia\" se esconde en el fichero de estilo tras la URL https://openmaptiles.github.io/osm-bright-gl-style/style-cdn.json .  Si lo abrimos, es un objeto JSON bastante complejo, pero si nos fijamos en las propiedades de primer nivel, son pocas.\nLas principales:   1\n2\n3\n4\n5\n6\n7\n8 { \n   version :   8 , \n   name :   OSM Bright , \n   sprite :   https://openmaptiles.github.io/osm-bright-gl-style/sprite , \n   glyphs :   https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo , \n   sources :   { ... }, \n   layers :   [ ... ]  }     version  es obligatoria y siempre es 8.  name  es opcional pero conveniente, es una etiqueta para mostrar el nombre del estilo.   sprite  indica de d\u00f3nde obtener el conjunto de  iconos  necesarios para simbolizar.  glyphs : indica de d\u00f3nde obtener el conjunto de  tipograf\u00edas  necesarios para simbolizar.  sources : los or\u00edgenes de datos.  layers : las reglas de simbolizaci\u00f3n. El orden es importante: Se van dibujando de la primera (que queda por debajo)\na la \u00faltima (que queda por encima). As\u00ed, la primera regla suele ser el color de fondo del mapa, y las \u00faltimas suelen\nser la toponimia o los PoIs.   En los pr\u00f3ximos cap\u00edtulos veremos en detalle c\u00f3mo usar  sources ,  layers ,  sprites  y  glyphs .  Habitualmente tambi\u00e9n se usan otras propiedades para indicar la vista inicial del mapa. Por ejemplo:  1\n2\n3\n4\n5\n6\n7 { \n   ... \n   center :   [ 2.15 ,   41.39 ], \n   zoom :   12 , \n   bearing :   -45 , \n   pitch :   0  }     center : Coordenadas iniciales donde centrar el mapa [lon, lat]  zoom : Zoom inicial del mapa  bearing : Rotaci\u00f3n inicial del mapa (en grados)  pitch : Inclinaci\u00f3n inicial del mapa para verlo en perspectiva (de 0 a 60 grados)    Tip  La especificaci\u00f3n completa del fichero de estilo es parte de la  documentaci\u00f3n on-line de Mapbox GL\nJS .", 
            "title": "Contenido de un fichero de estilo"
        }, 
        {
            "location": "/3_tileserver_gl/", 
            "text": "C\u00f3mo servir teselas vectoriales\n\n\nInstalaci\u00f3n de TileServer GL\n\n\nTileServer GL\n es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y\ncapaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.\n\n\nProporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet,\nOpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.\n\n\nSi se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas\nnativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales\nen teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light,\nque no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.\n\n\nPara este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.\n\n\nEs necesario tener instalado \nNode.js\n versi\u00f3n 6.\n\n\n\n\nWarning\n\n\ntileserver-gl-light NO se instalar\u00e1 correctamente si estamos usando una versi\u00f3n de Node.js superior a la 6.\nDebemos activar esta versi\u00f3n de node con el comando:\n\n\n1\n2\nnvm use \n6\n\nnode -v \n# Deber\u00eda devolver: 6.x.x\n\n\n\n\n\n\n\n\n\nUna vez comprobada la versi\u00f3n de node:\n\n\n1\n2\nnpm install -g tileserver-gl-light@2.3.1\ntileserver-gl-light -v \n# Deberia devolver: v2.3.1 \n\n\n\n\n\n\n\nArranque con la configuraci\u00f3n por defecto\n\n\nObtener datos de Barcelona\n\n\nCrear una carpeta llamada \ntileserver/data\n y copiar en ella el fichero `datos/barcelona.mbtiles:\n\n\n1\n2\nmkdir -p tileserver/data\ncp datos/barcelona.mbtiles tileserver/data\n\n\n\n\n\n\n\n\nTip\n\n\nEn la web de \nOpenMapTiles\n se pueden descargar datos de muchas\notras ciudades, pa\u00edses, e incluso el planeta entero. Es gratu\u00edto, aunque hay que registrarse y los datos\nno est\u00e1n del todo actualizados. \n\n\n\n\nAhora arrancaremos el servidor en el puerto \n8081\n (par\u00e1metro \n-p\n):\n\n\n1\n2\ncd\n tileserver\ntileserver-gl-light data/barcelona.mbtiles -p \n8081\n\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8081\n. Aparecer\u00e1 la p\u00e1gina del TileServer.\n\n\nDejar el terminal abierto con el servidor arrancado.\n\n\n\n\nTileServer GL Light\n\n\nModificar el visor de mapas\n\n\nModificaremos nuestro archivo \nindex.html\n para que el visor de mapas consuma las teselas vectoriales servidas por\n nuestro TileServer:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8081/styles/osm-bright/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nConfiguraci\u00f3n completa\n\n\nParemos el servidor y volvamos a arrancarlo, pero esta vez con la opci\u00f3n \n-V\n (verbose):\n\n\n1\n2\ncd\n tileserver\ntileserver-gl-light data/barcelona.mbtiles -p \n8081\n -V\n\n\n\n\n\n\nObservaremos que nos dice \"Automatically creating config file for barcelona.mbtiles\", y a continuaci\u00f3n nos muestra\nel fichero de configuraci\u00f3n que ha autogenerado, y que aproximadamente tendr\u00e1 este aspecto:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\n  \noptions\n:\n \n{\n\n    \npaths\n:\n \n{\n\n      \nroot\n:\n \n/home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles\n,\n\n      \nfonts\n:\n \nfonts\n,\n\n      \nstyles\n:\n \nstyles\n,\n\n      \nmbtiles\n:\n \n/home/user/Desktop/taller-vt/tileserver/data\n\n    \n}\n\n  \n},\n\n  \nstyles\n:\n \n{\n\n    \nklokantech-basic\n:\n \n{\n\n      \nstyle\n:\n \nklokantech-basic/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \nbounds\n:\n \n[\n-180\n,\n \n-85.0511\n,\n \n180\n,\n \n85.0511\n]\n\n      \n}\n\n    \n},\n\n    \nosm-bright\n:\n \n{\n\n      \nstyle\n:\n \nosm-bright/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \nbounds\n:\n \n[\n-180\n,\n \n-85.0511\n,\n \n180\n,\n \n85.0511\n]\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nv3\n:\n \n{\n\n      \nmbtiles\n:\n \nbarcelona.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nLa configuraci\u00f3n se divide en estos tres elementos:\n\n\n\n\noptions.paths\n: Rutas de donde obtener los diferentes recursos: \nmbtiles\n (datos), \nfonts\n (tambi\u00e9n llamados \nglyphs\n), y \nstyles\n.\n\n\nstyles\n: Ficheros de estilos y alguna informaci\u00f3n adicional para generar el fichero auxiliar TileJSON.\n\n\ndata\n: Origenes de datos. Apunta a los diferentes ficheros \n.mbtiles\n que queramos servir.\n\n\n\n\nCopiemos la configuraci\u00f3n que nos ha devuelto \ntileserver-gl-light\n en el fichero de configuraci\u00f3n \ntileserver/config.json\n.\n\n\n\n\nWarning\n\n\nAtenci\u00f3n a la ruta de \noptions.paths\n, que puede variar ligeramente entre estos apuntes y la ruta en vuestra m\u00e1quina,\ndependiendo de la versi\u00f3n exacta de node que teng\u00e1is instalada. Tened en cuenta esta discrepancia en la ruta para las\npr\u00f3ximas instrucciones. El resto de la configuraci\u00f3n deber\u00eda ser la misma. \n\n\n\n\nPor defecto \nTileserver GL\n viene con dos estilos incorporados (\nklokantech-basic\n y \nosm-bright\n) y cuatro tipograf\u00edas\n(\nOpen Sans\n en sus varintes \nRegular\n, \nItalic\n, \nBold\n y \nSemibold\n), que se esconden en la ruta profunda indicada en\n\noptions.paths.root\n.\n\n\nVamos a copiar estos recursos en nuestro directorio de trabajo:\n\n\n1\n2\n3\n4\nmkdir styles\nmkdir fonts\ncp -r /home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles/styles styles\ncp -r /home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles/fonts fonts\n\n\n\n\n\n\nComprobemos que en \n~/Desktop/taller-vt/tileserver\n tenemos tres directorios \ndata\n, \nfonts\n y \nstyles\n, y el fichero \nconfig.json\n.\n\n\nModifiquemos ahora el fichero \nconfig.json\n para apuntar a nuestros recursos:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n{\n\n  \noptions\n:\n \n{\n\n    \npaths\n:\n \n{\n\n\n      \nroot\n:\n \n,\n\n\n      \nfonts\n:\n \nfonts\n,\n\n\n      \nstyles\n:\n \nstyles\n,\n\n\n      \nmbtiles\n:\n \ndata\n\n\n    \n}\n\n  \n},\n\n  \nstyles\n:\n \n{\n\n    \nklokantech-basic\n:\n \n{\n\n      \nstyle\n:\n \nklokantech-basic/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n\n        \nbounds\n:\n \n[\n1.898\n,\n \n41.246\n,\n \n2.312\n,\n \n41.533\n]\n\n\n      \n}\n\n    \n},\n\n    \nosm-bright\n:\n \n{\n\n      \nstyle\n:\n \nosm-bright/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n\n        \nbounds\n:\n \n[\n1.898\n,\n \n41.246\n,\n \n2.312\n,\n \n41.533\n]\n\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nv3\n:\n \n{\n\n      \nmbtiles\n:\n \nbarcelona.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nDe paso hemos modificado el BBOX de los datos de Barcelona, que no estaba bien ajustado.\n\n\nArrancamos tileserver de nuevo, sin indicar el fichero de datos:\n\n\n1\ntileserver-gl-light -p \n8081\n\n\n\n\n\n\n\nTileserver deber\u00e1 decir \"Using specified config file from config.json\". Si vamos a \nhttp://localhost:8081\n deber\u00edamos\nver lo mismo que antes, pero ahora podremos ir a\u00f1adiendo nuestros propios datasets, estilos, tipograf\u00edas e iconos al\nservidor.\n\n\nA\u00f1adiendo datos de edificios\n\n\nVamos a copiar un nuevo \n.mbtiles\n con informaci\u00f3n de edificios:\n\n\n1\ncp ../datos/buildings.mbtiles data/\n\n\n\n\n\n\nY lo vamos a a\u00f1adir al fichero \nconfig.json\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n{\n\n  \noptions\n:\n \n{\n\n    \npaths\n:\n \n{\n\n      \nroot\n:\n \n,\n\n      \nfonts\n:\n \nfonts\n,\n\n      \nstyles\n:\n \nstyles\n,\n\n      \nmbtiles\n:\n \ndata\n\n    \n}\n\n  \n},\n\n  \nstyles\n:\n \n{\n\n    \nklokantech-basic\n:\n \n{\n\n      \nstyle\n:\n \nklokantech-basic/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \nbounds\n:\n \n[\n1.898\n,\n \n41.246\n,\n \n2.312\n,\n \n41.533\n]\n\n      \n}\n\n    \n},\n\n    \nosm-bright\n:\n \n{\n\n      \nstyle\n:\n \nosm-bright/style.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \nbounds\n:\n \n[\n1.898\n,\n \n41.246\n,\n \n2.312\n,\n \n41.533\n]\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nv3\n:\n \n{\n\n      \nmbtiles\n:\n \nbarcelona.mbtiles\n\n    \n},\n\n\n    \nbuildings\n:\n \n{\n\n\n      \nmbtiles\n:\n \nbuildings.mbtiles\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nParamos el servidor y arrancamos de nuevo. Recargando la p\u00e1gina \nhttp://localhost:8081\n veremos el nuevo dataset:\n\n\n\n\nHaciendo click en \"Preview\":\n\n\n\n\nEfectivamente, se trata de una capa con m\u00e1s de 500.000 construcciones de catastro, con la referencia de la parcela\ncatastral a la que pertenece cada construcci\u00f3n, y el n\u00famero de plantas para cada construcci\u00f3n. \n\n\n\n\nQuestion\n\n\n\u00bfPara qu\u00e9 sirve el \"TileJSON\" de un dataset?\n\n\nEn \u00faltima instancia, las teselas vectoriales se sirven en un servicio HTTP con una URL que acaba en \n/{z}/{x}/{y}.pbf\n.\n\n\nDe hecho, en el estilo de mapbox podemos indicar esta url directamente, as\u00ed:\n\n\n1\n2\n3\n4\n5\n6\n7\nsources\n:\n \n{\n\n    \n...\n\n    \nbuildings\n,\n \n{\n\n        \ntype\n:\n \nvector\n,\n\n        \ntiles\n:\n \n[\nhttp://localhost:8081/data/buildings/{z}/{x}/{y}.pbf\n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nAunque el m\u00e9todo preferido es apuntar a un TileJSON. Esta configuraci\u00f3n ser\u00eda equivalente a la anterior, pero m\u00e1s correcta:\n\n1\n2\n3\n4\n5\n6\n7\nsources\n:\n \n{\n\n    \n...\n\n    \nbuildings\n,\n \n{\n\n        \ntype\n:\n \nvector\n,\n\n        \nurl\n:\n \nhttp://localhost:8081/data/buildings.json\n\n    \n}\n\n\n}\n\n\n\n\n\n\nEl fichero TileJSON acaba teniendo una propiedad \"tiles\" que apunta al servicio XYZ, pero adem\u00e1s contiene otros\nmetadatos \u00fatiles para quien consume el dataset. Por ejemplo, el rango de niveles de zoom v\u00e1lidos para el dataset\n(\nminzoom\n, \nmaxzoom\n) y el bbox v\u00e1lido (\nbounds\n), lo que evita hacer peticiones fuera de rango al servidor, y\notros metadatos como las \"capas\" contenidas en cada Vector Tile, y los atributos de cada capa. Esto ayuda a funcionar\nal \nInspectorPlugin\n, y tambi\u00e9n nos da informaci\u00f3n a la hora de simbolizar la capa, ya que nos describe el esquema\nde los datos.\n\n\n\n\nA\u00f1adiendo los nuevos datos al visor\n\n\nPara visualizar los datos de edificios en \nbarcelona.html\n, usar el siguiente c\u00f3digo javascript:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8081/styles/klokantech-basic/style.json\n,\n\n\n        \ncenter\n:\n \n[\n2.19224\n,\n \n41.38585\n],\n\n\n        \nzoom\n:\n \n15\n,\n\n\n        \nbearing\n:\n \n-\n45\n,\n\n\n        \npitch\n:\n \n60\n,\n\n\n        \nhash\n:\n \ntrue\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n\n    \nmap\n.\non\n(\nload\n,\n \nfunction\n()\n \n{\n\n\n        \nmap\n.\naddSource\n(\nbuildings\n,\n \n{\n\n\n            \ntype\n:\n \nvector\n,\n\n\n            \nurl\n:\n \nhttp://localhost:8081/data/buildings.json\n\n\n        \n});\n\n\n\n\n        \nmap\n.\naddLayer\n({\n\n\n            \nid\n:\n \nbuildings\n,\n\n\n            \nsource\n:\n \nbuildings\n,\n\n\n            \nsource-layer\n:\n \nbuildingpart\n,\n\n\n            \ntype\n:\n \nfill\n,\n\n\n            \npaint\n:\n \n{\n\n\n                \nfill-opacity\n:\n \n0.75\n,\n\n\n                \nfill-color\n:\n \n#E9DFCD\n,\n\n\n                \nfill-outline-color\n:\n \n#000\n\n\n            \n}\n\n\n        \n});\n\n\n    \n});\n\n\n/\nscript\n\n\n\n\n\n\n\n\n\nIncluso podemos usar una regla de simbolizaci\u00f3n de extrusi\u00f3n para verlos en 3D:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nmap\n.\non\n(\nload\n,\n \nfunction\n()\n \n{\n\n    \nmap\n.\naddSource\n(\nbuildings\n,\n \n{\n\n        \ntype\n:\n \nvector\n,\n\n        \nurl\n:\n \nhttp://localhost:8081/data/buildings.json\n\n    \n});\n\n\n    \nmap\n.\naddLayer\n({\n\n        \nid\n:\n \nbuildings\n,\n\n        \nsource\n:\n \nbuildings\n,\n\n        \nsource-layer\n:\n \nbuildingpart\n,\n\n\n        \ntype\n:\n \nfill-extrusion\n,\n\n\n        \npaint\n:\n \n{\n\n\n            \nfill-extrusion-opacity\n:\n \n0.75\n,\n\n\n            \nfill-extrusion-color\n:\n \n#E9DFCD\n,\n\n\n            \nfill-extrusion-height\n:\n \n[\n*\n,\n \n3\n,\n \n[\nget\n,\n \nfloors\n]]\n\n\n        \n}\n\n\n    \n});\n\n\n});\n\n\n\n\n\n\n\nEn la regla de simbolizaci\u00f3n hemos utilizado como altura de la extrusi\u00f3n el n\u00famero de plantas multiplicado por 3.", 
            "title": "3. C\u00f3mo servirlas"
        }, 
        {
            "location": "/3_tileserver_gl/#como-servir-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo servir teselas vectoriales"
        }, 
        {
            "location": "/3_tileserver_gl/#instalacion-de-tileserver-gl", 
            "text": "TileServer GL  es un servidor de mapas de c\u00f3digo abierto creado para teselas vectoriales, y\ncapaz de renderizar en teselas raster con MapBox GL Native engine en el lado del servidor.  Proporciona mapas para aplicaciones web y m\u00f3viles. Es compatibles con Mapbox GL JS, Android SDK, iOS SDK, Leaflet,\nOpenLayers, HighDPI/Retina, SIG a trav\u00e9s de WMTS, etc.  Si se quiere servir teselas raster lo mejor es utilizar la versi\u00f3n de Docker ya que son necesarias algunas librer\u00edas\nnativas que pueden variar dependiendo de la plataforma, estas librer\u00edas sirven para renderizar las teselas vectoriales\nen teselas raster. Si \u00fanicamente se quiere servir teselas vectoriales se puede utilizar el TileServer GL Light,\nque no tiene ninguna dependencia nativa ya que est\u00e1 desarrollado en javascript.  Para este taller utilizaremos la versi\u00f3n Light ya que serviremos s\u00f3lo teselas vectoriales.  Es necesario tener instalado  Node.js  versi\u00f3n 6.   Warning  tileserver-gl-light NO se instalar\u00e1 correctamente si estamos usando una versi\u00f3n de Node.js superior a la 6.\nDebemos activar esta versi\u00f3n de node con el comando:  1\n2 nvm use  6 \nnode -v  # Deber\u00eda devolver: 6.x.x     Una vez comprobada la versi\u00f3n de node:  1\n2 npm install -g tileserver-gl-light@2.3.1\ntileserver-gl-light -v  # Deberia devolver: v2.3.1", 
            "title": "Instalaci\u00f3n de TileServer GL"
        }, 
        {
            "location": "/3_tileserver_gl/#arranque-con-la-configuracion-por-defecto", 
            "text": "", 
            "title": "Arranque con la configuraci\u00f3n por defecto"
        }, 
        {
            "location": "/3_tileserver_gl/#obtener-datos-de-barcelona", 
            "text": "Crear una carpeta llamada  tileserver/data  y copiar en ella el fichero `datos/barcelona.mbtiles:  1\n2 mkdir -p tileserver/data\ncp datos/barcelona.mbtiles tileserver/data    Tip  En la web de  OpenMapTiles  se pueden descargar datos de muchas\notras ciudades, pa\u00edses, e incluso el planeta entero. Es gratu\u00edto, aunque hay que registrarse y los datos\nno est\u00e1n del todo actualizados.    Ahora arrancaremos el servidor en el puerto  8081  (par\u00e1metro  -p ):  1\n2 cd  tileserver\ntileserver-gl-light data/barcelona.mbtiles -p  8081    Abrir el navegador y escribir  http://localhost:8081 . Aparecer\u00e1 la p\u00e1gina del TileServer.  Dejar el terminal abierto con el servidor arrancado.   TileServer GL Light", 
            "title": "Obtener datos de Barcelona"
        }, 
        {
            "location": "/3_tileserver_gl/#modificar-el-visor-de-mapas", 
            "text": "Modificaremos nuestro archivo  index.html  para que el visor de mapas consuma las teselas vectoriales servidas por\n nuestro TileServer:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8081/styles/osm-bright/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Modificar el visor de mapas"
        }, 
        {
            "location": "/3_tileserver_gl/#configuracion-completa", 
            "text": "Paremos el servidor y volvamos a arrancarlo, pero esta vez con la opci\u00f3n  -V  (verbose):  1\n2 cd  tileserver\ntileserver-gl-light data/barcelona.mbtiles -p  8081  -V   Observaremos que nos dice \"Automatically creating config file for barcelona.mbtiles\", y a continuaci\u00f3n nos muestra\nel fichero de configuraci\u00f3n que ha autogenerado, y que aproximadamente tendr\u00e1 este aspecto:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 { \n   options :   { \n     paths :   { \n       root :   /home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles , \n       fonts :   fonts , \n       styles :   styles , \n       mbtiles :   /home/user/Desktop/taller-vt/tileserver/data \n     } \n   }, \n   styles :   { \n     klokantech-basic :   { \n       style :   klokantech-basic/style.json , \n       tilejson :   { \n         bounds :   [ -180 ,   -85.0511 ,   180 ,   85.0511 ] \n       } \n     }, \n     osm-bright :   { \n       style :   osm-bright/style.json , \n       tilejson :   { \n         bounds :   [ -180 ,   -85.0511 ,   180 ,   85.0511 ] \n       } \n     } \n   }, \n   data :   { \n     v3 :   { \n       mbtiles :   barcelona.mbtiles \n     } \n   }  }    La configuraci\u00f3n se divide en estos tres elementos:   options.paths : Rutas de donde obtener los diferentes recursos:  mbtiles  (datos),  fonts  (tambi\u00e9n llamados  glyphs ), y  styles .  styles : Ficheros de estilos y alguna informaci\u00f3n adicional para generar el fichero auxiliar TileJSON.  data : Origenes de datos. Apunta a los diferentes ficheros  .mbtiles  que queramos servir.   Copiemos la configuraci\u00f3n que nos ha devuelto  tileserver-gl-light  en el fichero de configuraci\u00f3n  tileserver/config.json .   Warning  Atenci\u00f3n a la ruta de  options.paths , que puede variar ligeramente entre estos apuntes y la ruta en vuestra m\u00e1quina,\ndependiendo de la versi\u00f3n exacta de node que teng\u00e1is instalada. Tened en cuenta esta discrepancia en la ruta para las\npr\u00f3ximas instrucciones. El resto de la configuraci\u00f3n deber\u00eda ser la misma.    Por defecto  Tileserver GL  viene con dos estilos incorporados ( klokantech-basic  y  osm-bright ) y cuatro tipograf\u00edas\n( Open Sans  en sus varintes  Regular ,  Italic ,  Bold  y  Semibold ), que se esconden en la ruta profunda indicada en options.paths.root .  Vamos a copiar estos recursos en nuestro directorio de trabajo:  1\n2\n3\n4 mkdir styles\nmkdir fonts\ncp -r /home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles/styles styles\ncp -r /home/user/.nvm/versions/node/v6.14.2/lib/node_modules/tileserver-gl-light/node_modules/tileserver-gl-styles/fonts fonts   Comprobemos que en  ~/Desktop/taller-vt/tileserver  tenemos tres directorios  data ,  fonts  y  styles , y el fichero  config.json .  Modifiquemos ahora el fichero  config.json  para apuntar a nuestros recursos:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 { \n   options :   { \n     paths :   {         root :   ,         fonts :   fonts ,         styles :   styles ,         mbtiles :   data       } \n   }, \n   styles :   { \n     klokantech-basic :   { \n       style :   klokantech-basic/style.json , \n       tilejson :   {           bounds :   [ 1.898 ,   41.246 ,   2.312 ,   41.533 ]         } \n     }, \n     osm-bright :   { \n       style :   osm-bright/style.json , \n       tilejson :   {           bounds :   [ 1.898 ,   41.246 ,   2.312 ,   41.533 ]         } \n     } \n   }, \n   data :   { \n     v3 :   { \n       mbtiles :   barcelona.mbtiles \n     } \n   }  }    De paso hemos modificado el BBOX de los datos de Barcelona, que no estaba bien ajustado.  Arrancamos tileserver de nuevo, sin indicar el fichero de datos:  1 tileserver-gl-light -p  8081    Tileserver deber\u00e1 decir \"Using specified config file from config.json\". Si vamos a  http://localhost:8081  deber\u00edamos\nver lo mismo que antes, pero ahora podremos ir a\u00f1adiendo nuestros propios datasets, estilos, tipograf\u00edas e iconos al\nservidor.", 
            "title": "Configuraci\u00f3n completa"
        }, 
        {
            "location": "/3_tileserver_gl/#anadiendo-datos-de-edificios", 
            "text": "Vamos a copiar un nuevo  .mbtiles  con informaci\u00f3n de edificios:  1 cp ../datos/buildings.mbtiles data/   Y lo vamos a a\u00f1adir al fichero  config.json :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 { \n   options :   { \n     paths :   { \n       root :   , \n       fonts :   fonts , \n       styles :   styles , \n       mbtiles :   data \n     } \n   }, \n   styles :   { \n     klokantech-basic :   { \n       style :   klokantech-basic/style.json , \n       tilejson :   { \n         bounds :   [ 1.898 ,   41.246 ,   2.312 ,   41.533 ] \n       } \n     }, \n     osm-bright :   { \n       style :   osm-bright/style.json , \n       tilejson :   { \n         bounds :   [ 1.898 ,   41.246 ,   2.312 ,   41.533 ] \n       } \n     } \n   }, \n   data :   { \n     v3 :   { \n       mbtiles :   barcelona.mbtiles \n     },       buildings :   {         mbtiles :   buildings.mbtiles       }     }  }    Paramos el servidor y arrancamos de nuevo. Recargando la p\u00e1gina  http://localhost:8081  veremos el nuevo dataset:   Haciendo click en \"Preview\":   Efectivamente, se trata de una capa con m\u00e1s de 500.000 construcciones de catastro, con la referencia de la parcela\ncatastral a la que pertenece cada construcci\u00f3n, y el n\u00famero de plantas para cada construcci\u00f3n.    Question  \u00bfPara qu\u00e9 sirve el \"TileJSON\" de un dataset?  En \u00faltima instancia, las teselas vectoriales se sirven en un servicio HTTP con una URL que acaba en  /{z}/{x}/{y}.pbf .  De hecho, en el estilo de mapbox podemos indicar esta url directamente, as\u00ed:  1\n2\n3\n4\n5\n6\n7 sources :   { \n     ... \n     buildings ,   { \n         type :   vector , \n         tiles :   [ http://localhost:8081/data/buildings/{z}/{x}/{y}.pbf ] \n     }  }    Aunque el m\u00e9todo preferido es apuntar a un TileJSON. Esta configuraci\u00f3n ser\u00eda equivalente a la anterior, pero m\u00e1s correcta: 1\n2\n3\n4\n5\n6\n7 sources :   { \n     ... \n     buildings ,   { \n         type :   vector , \n         url :   http://localhost:8081/data/buildings.json \n     }  }    El fichero TileJSON acaba teniendo una propiedad \"tiles\" que apunta al servicio XYZ, pero adem\u00e1s contiene otros\nmetadatos \u00fatiles para quien consume el dataset. Por ejemplo, el rango de niveles de zoom v\u00e1lidos para el dataset\n( minzoom ,  maxzoom ) y el bbox v\u00e1lido ( bounds ), lo que evita hacer peticiones fuera de rango al servidor, y\notros metadatos como las \"capas\" contenidas en cada Vector Tile, y los atributos de cada capa. Esto ayuda a funcionar\nal  InspectorPlugin , y tambi\u00e9n nos da informaci\u00f3n a la hora de simbolizar la capa, ya que nos describe el esquema\nde los datos.", 
            "title": "A\u00f1adiendo datos de edificios"
        }, 
        {
            "location": "/3_tileserver_gl/#anadiendo-los-nuevos-datos-al-visor", 
            "text": "Para visualizar los datos de edificios en  barcelona.html , usar el siguiente c\u00f3digo javascript:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8081/styles/klokantech-basic/style.json ,           center :   [ 2.19224 ,   41.38585 ],           zoom :   15 ,           bearing :   - 45 ,           pitch :   60 ,           hash :   true \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());       map . on ( load ,   function ()   {           map . addSource ( buildings ,   {               type :   vector ,               url :   http://localhost:8081/data/buildings.json           });            map . addLayer ({               id :   buildings ,               source :   buildings ,               source-layer :   buildingpart ,               type :   fill ,               paint :   {                   fill-opacity :   0.75 ,                   fill-color :   #E9DFCD ,                   fill-outline-color :   #000               }           });       });  / script     Incluso podemos usar una regla de simbolizaci\u00f3n de extrusi\u00f3n para verlos en 3D:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 map . on ( load ,   function ()   { \n     map . addSource ( buildings ,   { \n         type :   vector , \n         url :   http://localhost:8081/data/buildings.json \n     }); \n\n     map . addLayer ({ \n         id :   buildings , \n         source :   buildings , \n         source-layer :   buildingpart ,           type :   fill-extrusion ,           paint :   {               fill-extrusion-opacity :   0.75 ,               fill-extrusion-color :   #E9DFCD ,               fill-extrusion-height :   [ * ,   3 ,   [ get ,   floors ]]           }       });  });    En la regla de simbolizaci\u00f3n hemos utilizado como altura de la extrusi\u00f3n el n\u00famero de plantas multiplicado por 3.", 
            "title": "A\u00f1adiendo los nuevos datos al visor"
        }, 
        {
            "location": "/4_tippecanoe/", 
            "text": "C\u00f3mo crear teselas vectoriales\n\n\nTippecanoe\n\n\nHerramienta que permite crear tesalas vectoriales de colecciones grandes (o peque\u00f1as) de elementos GeoJSON, Geobuf o CSV.\n\n\nEl objetivo de Tippecanoe es permitir una visi\u00f3n de sus datos independiente de la escala, de modo que en cualquier nivel desde el mundo entero hasta un solo edificio, podamos ver la densidad y la textura de los datos en lugar de una simplificaci\u00f3n para eliminar caracter\u00edsticas supuestamente sin importancia o agrup\u00e1ndolos o agreg\u00e1ndolos.\n\n\nAlgunos ejemplos:\n\n\n\n\n\n\nSi le da todo OpenStreetMap y alejas la vista, le devolver\u00e1 algo que se parece a \"Todas las calles\" en lugar de algo que parece un atlas de carretera interestatal.\n\n\n\n\n\n\nSi le das todas las huellas de edificios en Los \u00c1ngeles y alejas la vista lo suficiente como para que la mayor\u00eda de los edificios individuales ya no sean perceptibles, a\u00fan deber\u00edas poder ver la extensi\u00f3n y variedad del desarrollo en cada vecindario, no solo en los edificios m\u00e1s grandes del centro.\n\n\n\n\n\n\nDatos\n\n\nDescageremos algunos datos de \nNatural Earth\n en nuestra carpeta de datos. En el apartado de descargas de Natural Earth hay varios conjuntos de datos (en formato Shapefile) seg\u00fan la escala. \n\n\nEn el taller trabajaremos con un subconjunto de los datos de la escala 1:10m (1:10.000.000). Para ahorrarnos la transformaci\u00f3n de Shapefile a GeoJSON utilizaremos los datos procedentes de \nhttps://github.com/nvkelso/natural-earth-vector/\n\n\nDescagaremos las siguientes capas:\n\n\n\n\nCultural\n\n\nAdmin 0 \u2013 Countries (247 pa\u00edses en el mundo. Groenlandia separada de Dinamarca)\n\n\nPopulated Places (Puntos de ciudades y pueblos)\n\n\nRoads (Carreteras principales)\n\n\nRailroads (V\u00edas de Trenes)\n\n\nAirports (Aeropuertos)\n\n\n\n\n\n\nPhysical\n\n\nCoastline (L\u00ednea de costa que incluyen islas principales)\n\n\nLand (Pol\u00edgonos terrestres que incluyen islas principales)\n\n\nOcean (Oceano)\n\n\nRivers + lake centerlines (Rios en \u00fanica l\u00ednea que incluyen l\u00edneas centrales de lagos)\n\n\nLakes + Reservoirs (Lagos naturales y artificiales)\n\n\n\n\n\n\n\n\nPara descargar las capas escribiremos lo siguiente en nuestro terminal.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nmkdir naturalearth\n\ncd\n naturalearth\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_populated_places.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_roads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_railroads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_airports.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_coastline.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_land.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_ocean.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_lake_centerlines.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_lakes.geojson\n\n\n\n\n\n\nCrear el mbtiles\n\n\nUna vez descargados todos nuestros datos vamos a crear un mbtiles llamado \nnatural_earth.mbtiles\n que contendr\u00e1 nuestras 10 capas. \n\n\nPara crear el mbtiles utilizaremos las siguientes opciones del Tippecanoe (\nListado de opciones\n):\n\n\n\n\n-o \nnombre.mbtiles\n: nombre del archivo de salida.\n\n\n-zg: Estima un maxzoom razonable basado en el espaciado de los elementos.\n\n\n--drop-densest-as-needed: Si una tesela es demasiado grande, intenta reducirla a menos de 500K aumentando el espacio m\u00ednimo entre los elementos.\n\n\n-L \nnombre\n:\narchivo.json\n: permite definir nombres de capa para cada archivo individual.  \n\n\n\n\nPara generar el archivo mbtiles escribiremos lo siguiente en el terminal.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ntippecanoe -o natural_earth.mbtiles -zg --drop-densest-as-needed \\\n  -L ocean:ne_10m_ocean.geojson \\\n  -L land:ne_10m_land.geojson \\\n  -L admin:ne_10m_admin_0_countries.geojson \\\n  -L coastline:ne_10m_coastline.geojson \\\n  -L lakes:ne_10m_lakes.geojson \\\n  -L rivers:ne_10m_rivers_lake_centerlines.geojson \\\n  -L rail:ne_10m_railroads.geojson \\\n  -L roads:ne_10m_roads.geojson \\\n  -L cities:ne_10m_populated_places.geojson \\\n  -L airports:ne_10m_airports.geojson\n\n\n\n\n\n\nVisualizar el mbtiles\n\n\nUtilizaremos el TileServer para visualizar el mbtiles creado con el Tippecanoe. Para ello escribimos lo siguiente en el terminal:\n\n\n1\n2\n3\nmv natural_earth.mbtiles ../servidor/data\ncd ../servidor\nnpx tileserver-gl-light data/natural_earth.mbtiles -p 8181\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8181\n y comprobar que aparece la p\u00e1gina del TileServer con nuestro mbtiles\n\n\n\n\nTileServer GL Light\n\n\nApretar el bot\u00f3n de \nInspect\n y comprobar que en el mapa aparecen todas las capas agregadas al mbtiles\n\n\n\n\nMbtiles Natural Earth", 
            "title": "4. C\u00f3mo crearlas"
        }, 
        {
            "location": "/4_tippecanoe/#como-crear-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo crear teselas vectoriales"
        }, 
        {
            "location": "/4_tippecanoe/#tippecanoe", 
            "text": "Herramienta que permite crear tesalas vectoriales de colecciones grandes (o peque\u00f1as) de elementos GeoJSON, Geobuf o CSV.  El objetivo de Tippecanoe es permitir una visi\u00f3n de sus datos independiente de la escala, de modo que en cualquier nivel desde el mundo entero hasta un solo edificio, podamos ver la densidad y la textura de los datos en lugar de una simplificaci\u00f3n para eliminar caracter\u00edsticas supuestamente sin importancia o agrup\u00e1ndolos o agreg\u00e1ndolos.  Algunos ejemplos:    Si le da todo OpenStreetMap y alejas la vista, le devolver\u00e1 algo que se parece a \"Todas las calles\" en lugar de algo que parece un atlas de carretera interestatal.    Si le das todas las huellas de edificios en Los \u00c1ngeles y alejas la vista lo suficiente como para que la mayor\u00eda de los edificios individuales ya no sean perceptibles, a\u00fan deber\u00edas poder ver la extensi\u00f3n y variedad del desarrollo en cada vecindario, no solo en los edificios m\u00e1s grandes del centro.", 
            "title": "Tippecanoe"
        }, 
        {
            "location": "/4_tippecanoe/#datos", 
            "text": "Descageremos algunos datos de  Natural Earth  en nuestra carpeta de datos. En el apartado de descargas de Natural Earth hay varios conjuntos de datos (en formato Shapefile) seg\u00fan la escala.   En el taller trabajaremos con un subconjunto de los datos de la escala 1:10m (1:10.000.000). Para ahorrarnos la transformaci\u00f3n de Shapefile a GeoJSON utilizaremos los datos procedentes de  https://github.com/nvkelso/natural-earth-vector/  Descagaremos las siguientes capas:   Cultural  Admin 0 \u2013 Countries (247 pa\u00edses en el mundo. Groenlandia separada de Dinamarca)  Populated Places (Puntos de ciudades y pueblos)  Roads (Carreteras principales)  Railroads (V\u00edas de Trenes)  Airports (Aeropuertos)    Physical  Coastline (L\u00ednea de costa que incluyen islas principales)  Land (Pol\u00edgonos terrestres que incluyen islas principales)  Ocean (Oceano)  Rivers + lake centerlines (Rios en \u00fanica l\u00ednea que incluyen l\u00edneas centrales de lagos)  Lakes + Reservoirs (Lagos naturales y artificiales)     Para descargar las capas escribiremos lo siguiente en nuestro terminal.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 mkdir naturalearth cd  naturalearth\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_populated_places.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_roads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_railroads.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_airports.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_coastline.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_land.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_ocean.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_lake_centerlines.geojson\nwget https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_lakes.geojson", 
            "title": "Datos"
        }, 
        {
            "location": "/4_tippecanoe/#crear-el-mbtiles", 
            "text": "Una vez descargados todos nuestros datos vamos a crear un mbtiles llamado  natural_earth.mbtiles  que contendr\u00e1 nuestras 10 capas.   Para crear el mbtiles utilizaremos las siguientes opciones del Tippecanoe ( Listado de opciones ):   -o  nombre.mbtiles : nombre del archivo de salida.  -zg: Estima un maxzoom razonable basado en el espaciado de los elementos.  --drop-densest-as-needed: Si una tesela es demasiado grande, intenta reducirla a menos de 500K aumentando el espacio m\u00ednimo entre los elementos.  -L  nombre : archivo.json : permite definir nombres de capa para cada archivo individual.     Para generar el archivo mbtiles escribiremos lo siguiente en el terminal.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 tippecanoe -o natural_earth.mbtiles -zg --drop-densest-as-needed \\\n  -L ocean:ne_10m_ocean.geojson \\\n  -L land:ne_10m_land.geojson \\\n  -L admin:ne_10m_admin_0_countries.geojson \\\n  -L coastline:ne_10m_coastline.geojson \\\n  -L lakes:ne_10m_lakes.geojson \\\n  -L rivers:ne_10m_rivers_lake_centerlines.geojson \\\n  -L rail:ne_10m_railroads.geojson \\\n  -L roads:ne_10m_roads.geojson \\\n  -L cities:ne_10m_populated_places.geojson \\\n  -L airports:ne_10m_airports.geojson", 
            "title": "Crear el mbtiles"
        }, 
        {
            "location": "/4_tippecanoe/#visualizar-el-mbtiles", 
            "text": "Utilizaremos el TileServer para visualizar el mbtiles creado con el Tippecanoe. Para ello escribimos lo siguiente en el terminal:  1\n2\n3 mv natural_earth.mbtiles ../servidor/data\ncd ../servidor\nnpx tileserver-gl-light data/natural_earth.mbtiles -p 8181   Abrir el navegador y escribir  http://localhost:8181  y comprobar que aparece la p\u00e1gina del TileServer con nuestro mbtiles   TileServer GL Light  Apretar el bot\u00f3n de  Inspect  y comprobar que en el mapa aparecen todas las capas agregadas al mbtiles   Mbtiles Natural Earth", 
            "title": "Visualizar el mbtiles"
        }, 
        {
            "location": "/5_estilos/", 
            "text": "C\u00f3mo simbolizar teselas vectoriales\n\n\nMaputnik\n\n\nEs un editor visual gratuito y abierto para estilos Mapbox GL dirigidos tanto a desarrolladores como a dise\u00f1adores de mapas.\n\n\nSe puede utilizar en l\u00ednea en \nMaputnik editor\n (todo se guarda en el almacenamiento local) \u00f3 se puede hacer una instalaci\u00f3n local.\n\n\nInstalaci\u00f3n\n\n\nSi vamos a la p\u00e1gina de \nReleases\n de Maputnik aparece que la \u00faltima versi\u00f3n es la v1.0.2. Realmente existe una versi\u00f3n v1.1.0 que est\u00e1 en la p\u00e1gina de releases pero que no est\u00e1 marcada como la \u00faltima versi\u00f3n.\n\n\nDescagaremos la versi\u00f3n v1.1.0 que es la \u00faltima versi\u00f3n disponible para la fecha de este taller. \n\n\n1\n2\nwget https://github.com/maputnik/editor/archive/v1.1.0.tar.gz\ntar -xzvf archivo.tar.gz\n\n\n\n\n\n\nVamos a la carpeta \neditor-1.1.0\n creada al descomprimir el archivo descargado he instalamos las dependencias del Maputnik\n\n\n1\n2\ncd\n editor-1.1.0\nnpm install\n\n\n\n\n\n\nAl finalizar la instalaci\u00f3n comprobamos que no aparezca ning\u00fan error (pueden aparecer algunos WARN) y arrancamos el servidor de Maputnik\n\n\n1\nnpm start\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8888\n y comprobar que aparece la p\u00e1gina del Maputnik\n\n\n\n\nMaputnik\n\n\nEstilizar el mbtiles\n\n\nPor defecto Maputnik nos\n\n\nAgregar un origen de datos (Source)\n\n\nEn el editor del Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nSource\n para desplegar el di\u00e1logo de gestionar fuentes de datos. En la parte inferior del di\u00e1logo esta el apartado para agregar una fuente nueva de datos \nAdd New Source\n. Para agregar nuestra fuente de datos mbtiles tenemos dos opciones.\n\n\n\n\nMaputnik agregar origen de datos\n\n\n\n\nVector (TileJSON URL)\n\n\n\n\nSource ID\n: identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos \nnatural_earth\n\n\nSource Type\n: tipo de la fuente de datos. Seleccionar la opci\u00f3n de \nVector (TileJSON URL)\n\n\nTileJSON URL\n: url del archivo JSON de descripci\u00f3n de la fuente. Pondremos la url de nuestro TileServerGL \nhttp://localhost:8181/data/natural_earth.json\n\n\n\n\nVector (XYZ URL)\n\n\n\n\nSource ID\n: identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos \nnatural_earth_1\n\n\nSource Type\n: tipo de la fuente de datos. Seleccionar la opci\u00f3n de \nVector (XYZ URL)\n\n\nTileJSON URL\n: url del servicio de teselas. Pondremos la url de nuestro TileServerGL \nhttp://localhost:8181/data/natural_earth/{z}/{x}/{y}.pbf\n\n\nMin Zoom\n: 0\n\n\nMax Zoom\n: 5\n\n\nAgregar sprite y glyph\n\n\nEn el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nStyle Settings\n para desplegar el di\u00e1logo de gestionar la configuraci\u00f3n del estilo.\n\n\n\n\nMaputnik configuraci\u00f3n de estilo\n\n\nName\n: nombre del estilo. En nuestro caso pondremos \nnatural earth\n\n\nSprite URL\n: proporciona una plantilla para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de estilo del fondo, patrones de relleno, patrones de l\u00edneas e imagenes de iconos. En nuestro caso pondremos \"\nhttps://openmaptiles.github.io/osm-bright-gl-style/sprite\n\"\n\n\nGlyphs URL\n: proporciona una plantilla para cargar conjuntos de glifos formato PBF. Aqu\u00ed es donde se cargan las diferentes fuentes. En nuestro caso pondremos \"\nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n\"\n\n\nAgregar una capa\n\n\nEn el editor de Maputnik presionamos el bot\u00f3n de \nAdd Layer\n para desplegar el di\u00e1logo de agregar capa al mapa. \n\n\n\n\nMaputnik agregar capa\n\n\nID\n: identificador \u00fanico de la capa. Pondremos \noceanos\n\n\nType\n: tipo de capa. Seleccionar la opci\u00f3n de \nFill\n ya que la capa es de tipo pol\u00edgono\n\n\nSource\n: identificador del origen de datos. En nuestro caso pondremos \nnatural_earth\n\n\nSource Layer\n: identificador de la capa dentro del origen de datos. Pondremos \nocean\n para agregar la capa de los oc\u00e9anos.\n\n\nEstilizar una capa seg\u00fan un campo\n\n\nEn esta versi\u00f3n de maputnik (v1.1.0) no est\u00e1 implemantado el estilo \nbasado en expressiones\n. Se pueden utilizar los \nstops\n que actualmente estan \ndeprecated\n para aplicar estilos seg\u00fan el nivel de zoom. En nuestro caso tendremos que utilizar filtros para poder estilizar una capa seg\u00fan un valor de un campo de texto.\n\n\n\n\n\n\nAgregar la capa de lineas de Ferry. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \nferrys\n\n\nType\n: \nLine\n ya que la capa es de tipo l\u00ednea\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \nroads\n para agregar la capa de carreteras que tambi\u00e9n contiena las lineas de ferry.\n\n\n\n\n\n\nVemos que aparecen todas las carreteras en el mapa.\n\n\n\n\n\n\nFiltar la informaci\u00f3n. Selecci\u00f3n la capa de \nferrys\n y en el apartado de Filter presionar el bot\u00f3n de \nAdd filter\n. En registro que aparece poner la siguiente informaci\u00f3n:\n\n\n\n\n\n\n\n\nMaputnik agregar filtro a una capa\n\n\n1\n2\n3\n4\n5\n* Cambiar donde dice name por *type*\n\n* Dejar el selector de comparaci\u00f3n en *==*\n\n* Escribir en el campo de valor (que est\u00e1 vacio) *Ferry Route*\n\n\n\n\n\n\nComprobar que s\u00f3lo aparacen las l\u00edneas de Ferry en el mapa.\n\n\n\n\nQuestion\n\n\nHacer lo mismo para agregar la capa de carreteras principales(Major Highway) y secundarias(Secondary Highway).\n\n\n\n\nEtiquetar una capa\n\n\n\n\n\n\nAgregar la capa de ciudades. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \nciudades_etiquetas\n\n\nType\n: \nSymbol\n ya que queremos que sea de tipo texto\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \ncities\n para agregar la capa de ciudades.\n\n\n\n\n\n\nAgregar el campo por el que se quiere etiquetar. Seleccionar la capa de \nciudades\n y en el apartado de \nText layout properties\n en el campo \nField\n escribir \n{nombre del campo}\n. En nuestro caso debemos escribir \n{NAME}\n.\n\n\n\n\n\n\nEstilizar las etiquetas. En el apartado de \nText paint properties\n podemos definir el estilo de las etiquetas. Para los textos podemos definir un Halo para que el teto destaque mejor en nuestro mapa.\n\n\n\n\n\n\nUtilizar un icono para simbolizar nuestra capa\n\n\n\n\n\n\nAgregar la capa de aeropuertos. Presionar el bot\u00f3n de \nAdd Layer\n y rellenar el formulario con la siguiente informaci\u00f3n:\n\n\nID\n: \naeropuertos\n\n\nType\n: \nSymbol\n ya que queremos que sea de tipo texto\n\n\nSource\n: \nnatural_earth\n\n\nSource Layer\n: \nairports\n para agregar la capa de aeropuertos.\n\n\n\n\n\n\nAgregar el icono. Selecccionar la capa de \naeropuertos\n y en el apartado de \nIcon layout properties\n escribir en el campo \nImage\n \nairport_11\n. Este nombre debe coincidir con alguna imagen definida en el sprite.\n\n\n\n\n\n\nComprobar que aparecen los aeropuertos en el mapa\n\n\n\n\n\n\n\n\nTip\n\n\nAqui puede ver la lista de los nombres de las im\u00e1genes del sprite que estamos utilizando \nhttps://github.com/openmaptiles/osm-bright-gl-style/tree/master/icons\n.\n\n\n\n\nEjercicio\n\n\nAgregar y aplicar estilo al resto de capas del \nnatural_earth.mbtiles\n\n\nExportar el estilo creado\n\n\nEn el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de \nExport\n para desplegar el di\u00e1logo de exportaci\u00f3n del estilo.\n\n\nEn el dialogo presionamos el boton de \nDownload\n para descargar el estilo en nuestro ordenador.\n\n\nDescargamos el archivo y lo renombramos a \nnatural_earth.json\n. Luego lo movemos a la carpeta \ndata\n\n\nDentro de la carpeta \ndata\n crear un fichero \nconfig.json\n. Para m\u00e1s detalles \nhttp://tileserver.readthedocs.io/en/latest/config.html#\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n{\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nEjecutar el tileserver utilizando el archivo de configuraci\u00f3n creado\n\n\n1\ntileserver-gl-light -c config.test.json -p \n8181\n\n\n\n\n\n\n\nAbrir el navegador y escribir \nhttp://localhost:8181\n. Aparecer\u00e1 la p\u00e1gina del TileServer donde podemos comprobar nuestro estilo presionando el bot\u00f3n de \nVector\n\n\nModificar el archivo \nindex.html\n para que el visor de mapa para cargue los datos de Natural Earth con el estilo creado en Maputnik\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8181/styles/natural-earth/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nEstilo basado en datos (data-driven style)\n\n\nEl estilo basado en datos le permite estilizar los datos en funci\u00f3n de sus propiedades. Por ejemplo, cambiar el radio de un c\u00edrculo en funci\u00f3n de la cantidad de clientes, cambiar el color de un pol\u00edgono de estado seg\u00fan la poblaci\u00f3n o usar la l\u00f3gica condicional para crear etiquetas biling\u00fces.\n\n\nPara crear estilos basados en datos debemos usar las Mapbox GL JS expressions. En la especificaci\u00f3n de estilo de Mapbox, el valor de cualquier propiedad de dise\u00f1o, propiedad de estilo o filtro se puede especificar como una expresi\u00f3n. Las expresiones definen c\u00f3mo se combinan uno o m\u00e1s valores de propiedad y / o el nivel de zoom actual utilizando operaciones l\u00f3gicas, matem\u00e1ticas, de cadena o de color para producir el valor de propiedad de estilo apropiado o la decisi\u00f3n de filtro.\n\n\nPara m\u00e1s informaci\u00f3n y ejemplos \nhttps://www.mapbox.com/help/how-map-design-works/#data-driven-styles\n\n\nCrear un estilo basado en datos\n\n\nCopiar el estilo \nnatural_earth.json\n en un fichero llamado \nnatural_earth_2.json\n\n\nEstilo basado en valores concretos de una propiedad\n\n\nEditar el fichero \nnatural_earth_2.json\n y eliminar las capas con id \nsecundarias\n, \nprincipales\n y \nferrys\n\n\nEntre la capa con id \nland\n y la capa con id \naeropuertos\n crear una capa con id \nroads\n. El color de las l\u00edneas de esta capa varia dependiendo del valor de la propiedad \ntype\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n{\n\n    \nid\n:\n \nroads\n,\n\n    \ntype\n:\n \nline\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \nroads\n,\n\n    \nlayout\n:\n \n{\n\n        \nvisibility\n:\n \nvisible\n\n    \n},\n\n    \npaint\n:\n \n{\n\n        \nline-color\n:\n \n[\n\n            \nmatch\n,\n\n            \n[\n\n                \nget\n,\n\n                \ntype\n\n            \n],\n\n            \nSecondary Highway\n,\n\n            \nrgba(206, 32, 79, 1)\n,\n\n            \nFerry Route\n,\n\n            \nrgba(138, 154, 241, 1)\n,\n\n            \nMajor Highway\n,\n\n            \nrgba(20, 52, 232, 1)\n,\n\n            \n#000000\n\n        \n],\n\n        \nline-width\n:\n \n2\n\n    \n}\n\n\n},\n\n\n\n\n\n\n\nEstilo basado en el nivel del zoom\n\n\nEditar el fichero \nnatural_earth_2.json\n modificar la capa \nciudades_etiquetas\n para cambiar el tama\u00f1o del texto basado en el nivel de zoom del mapa y en la propiedad \nSCALERANK\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n{\n\n    \nid\n:\n \nciudades_etiquetas\n,\n\n    \ntype\n:\n \nsymbol\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \ncities\n,\n\n    \nlayout\n:\n \n{\n\n    \nsymbol-placement\n:\n \npoint\n,\n\n    \ntext-field\n:\n \n{NAME}\n,\n\n    \nvisibility\n:\n \nvisible\n,\n\n    \ntext-anchor\n:\n \nbottom\n,\n\n    \ntext-offset\n:\n \n[\n0\n,\n \n-\n1\n],\n\n    \ntext-size\n:\n \n[\n\n        \nstep\n,\n\n        \n[\nzoom\n],\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n3\n\n        \n],\n\n        \n18\n,\n\n        \n0\n\n        \n],\n\n        \n5\n,\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n2\n\n        \n],\n\n        \n20\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n5\n\n        \n],\n\n        \n14\n,\n\n        \n10\n\n        \n],\n\n        \n8\n,\n\n        \n[\n\n        \ncase\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n2\n\n        \n],\n\n        \n24\n,\n\n        \n[\n\n            \n=\n,\n\n            \n[\n\n            \nnumber\n,\n\n            \n[\nget\n,\n \nSCALERANK\n]\n\n            \n],\n\n            \n5\n\n        \n],\n\n        \n18\n,\n\n        \n14\n\n        \n]\n\n    \n]\n\n    \n},\n\n    \npaint\n:\n \n{\n\n    \ntext-halo-color\n:\n \nrgba(253, 253, 253, 1)\n,\n\n    \ntext-halo-width\n:\n \n5\n,\n\n    \ntext-color\n:\n \nrgba(16, 16, 16, 1)\n,\n\n    \ntext-halo-blur\n:\n \n2\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nEstilo basado en una propiedad\n\n\nCrear una capa con id \nciudades\n y de tipo \ncircle\n entre las capas \naeropuertos\n y la capa \nciudades_etiquetas\n. En esta nueva capa el tama\u00f1o del circulo utilizar\u00e1 directamente el valor de la propiedad \nSCALERANK\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\n    \nid\n:\n \nciudades\n,\n\n    \ntype\n:\n \ncircle\n,\n\n    \nsource\n:\n \nlocal\n,\n\n    \nsource-layer\n:\n \ncities\n,\n\n    \nlayout\n:\n \n{\n\n    \nvisibility\n:\n \nvisible\n\n    \n},\n\n    \npaint\n:\n \n{\n\n    \ncircle-color\n:\n \n[\n\n        \nmatch\n,\n\n        \n[\nget\n,\n \nADM0CAP\n],\n\n        \n0\n,\n\n        \nhsl(285, 75%, 68%)\n,\n\n        \nhsl(0, 96%, 48%)\n\n    \n],\n\n    \ncircle-radius\n:\n \n[\n-\n,\n \n15\n,\n \n[\nget\n,\nSCALERANK\n]]\n\n    \n}\n\n\n},\n\n\n\n\n\n\n\nAgregar el nuevo estilo al fichero de configuraci\u00f3n \nconfig.json\n del tileserver-gl\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n{\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n},\n\n\n    \nnatural-earth-2\n:\n \n{\n\n\n      \nstyle\n:\n \nnatural_earth_2.json\n,\n\n\n      \ntilejson\n:\n \n{\n\n\n        \ntype\n:\n \noverlay\n\n\n      \n}\n\n\n    \n}\n\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nParar \nCtrl+c\n y arrancar el tileserver utilizando el archivo de configuraci\u00f3n creado\n\n\n1\ntileserver-gl-light -c config.test.json -p \n8181\n\n\n\n\n\n\n\nModificar el archivo \nindex.html\n para que el visor de mapa para cargue los datos de Natural Earth con el nuevo estilo creado\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nmeta\n \ncharset\n=\nUTF-8\n\n    \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1\n\n    \ntitle\nMapa VT\n/\ntitle\n\n    \nlink\n \nrel\n=\nstylesheet\n \nhref\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\n/\nscript\n\n    \nlink\n \nhref\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css\n \nrel\n=\nstylesheet\n \n/\n\n    \nscript\n \nsrc\n=\nhttps://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js\n/\nscript\n\n    \nstyle\n\n        \nhtml\n,\n \nbody\n \n{\n\n            \nmargin\n:\n \n0\n;\n\n            \nheight\n:\n \n100\n%\n;\n\n        \n}\n\n    \n/\nstyle\n\n\n/\nhead\n\n\nbody\n \nid\n=\nmap\n\n\nscript\n\n    \nvar\n \nmap\n \n=\n \nnew\n \nmapboxgl\n.\nMap\n({\n\n        \ncontainer\n:\n \nmap\n,\n \n// id del elemento HTML que contendr\u00e1 el mapa\n\n\n        \nstyle\n:\n \nhttp://localhost:8181/styles/natural-earth-2/style.json\n,\n \n// Ubicaci\u00f3n del estilo\n\n\n        \ncenter\n:\n \n[\n2.175\n,\n \n41.39\n],\n \n// Ubicaci\u00f3n inicial\n\n        \nzoom\n:\n \n13\n,\n \n// Zoom inicial\n\n        \nbearing\n:\n \n-\n45\n,\n \n// \u00c1ngulo de rotaci\u00f3n inicial\n\n        \nhash\n:\n \ntrue\n \n// Permite ir guardando la posici\u00f3n del mapa en la URL\n\n    \n});\n\n\n    \n// Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa:\n\n    \nmap\n.\naddControl\n(\nnew\n \nmapboxgl\n.\nNavigationControl\n());\n\n\n    \n// Agregar el control de inspecci\u00f3n\n\n    \nmap\n.\naddControl\n(\nnew\n \nMapboxInspect\n());\n\n\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml", 
            "title": "5. C\u00f3mo simbolizarlas"
        }, 
        {
            "location": "/5_estilos/#como-simbolizar-teselas-vectoriales", 
            "text": "", 
            "title": "C\u00f3mo simbolizar teselas vectoriales"
        }, 
        {
            "location": "/5_estilos/#maputnik", 
            "text": "Es un editor visual gratuito y abierto para estilos Mapbox GL dirigidos tanto a desarrolladores como a dise\u00f1adores de mapas.  Se puede utilizar en l\u00ednea en  Maputnik editor  (todo se guarda en el almacenamiento local) \u00f3 se puede hacer una instalaci\u00f3n local.", 
            "title": "Maputnik"
        }, 
        {
            "location": "/5_estilos/#instalacion", 
            "text": "Si vamos a la p\u00e1gina de  Releases  de Maputnik aparece que la \u00faltima versi\u00f3n es la v1.0.2. Realmente existe una versi\u00f3n v1.1.0 que est\u00e1 en la p\u00e1gina de releases pero que no est\u00e1 marcada como la \u00faltima versi\u00f3n.  Descagaremos la versi\u00f3n v1.1.0 que es la \u00faltima versi\u00f3n disponible para la fecha de este taller.   1\n2 wget https://github.com/maputnik/editor/archive/v1.1.0.tar.gz\ntar -xzvf archivo.tar.gz   Vamos a la carpeta  editor-1.1.0  creada al descomprimir el archivo descargado he instalamos las dependencias del Maputnik  1\n2 cd  editor-1.1.0\nnpm install   Al finalizar la instalaci\u00f3n comprobamos que no aparezca ning\u00fan error (pueden aparecer algunos WARN) y arrancamos el servidor de Maputnik  1 npm start   Abrir el navegador y escribir  http://localhost:8888  y comprobar que aparece la p\u00e1gina del Maputnik   Maputnik", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/5_estilos/#estilizar-el-mbtiles", 
            "text": "Por defecto Maputnik nos", 
            "title": "Estilizar el mbtiles"
        }, 
        {
            "location": "/5_estilos/#agregar-un-origen-de-datos-source", 
            "text": "En el editor del Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Source  para desplegar el di\u00e1logo de gestionar fuentes de datos. En la parte inferior del di\u00e1logo esta el apartado para agregar una fuente nueva de datos  Add New Source . Para agregar nuestra fuente de datos mbtiles tenemos dos opciones.   Maputnik agregar origen de datos   Vector (TileJSON URL)   Source ID : identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos  natural_earth  Source Type : tipo de la fuente de datos. Seleccionar la opci\u00f3n de  Vector (TileJSON URL)  TileJSON URL : url del archivo JSON de descripci\u00f3n de la fuente. Pondremos la url de nuestro TileServerGL  http://localhost:8181/data/natural_earth.json   Vector (XYZ URL)   Source ID : identificador \u00fanico de la capa: es el nombre que utilizaremos como referencia en las capas. En nuestro caso pondremos  natural_earth_1  Source Type : tipo de la fuente de datos. Seleccionar la opci\u00f3n de  Vector (XYZ URL)  TileJSON URL : url del servicio de teselas. Pondremos la url de nuestro TileServerGL  http://localhost:8181/data/natural_earth/{z}/{x}/{y}.pbf  Min Zoom : 0  Max Zoom : 5", 
            "title": "Agregar un origen de datos (Source)"
        }, 
        {
            "location": "/5_estilos/#agregar-sprite-y-glyph", 
            "text": "En el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Style Settings  para desplegar el di\u00e1logo de gestionar la configuraci\u00f3n del estilo.   Maputnik configuraci\u00f3n de estilo  Name : nombre del estilo. En nuestro caso pondremos  natural earth  Sprite URL : proporciona una plantilla para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de estilo del fondo, patrones de relleno, patrones de l\u00edneas e imagenes de iconos. En nuestro caso pondremos \" https://openmaptiles.github.io/osm-bright-gl-style/sprite \"  Glyphs URL : proporciona una plantilla para cargar conjuntos de glifos formato PBF. Aqu\u00ed es donde se cargan las diferentes fuentes. En nuestro caso pondremos \" https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo \"", 
            "title": "Agregar sprite y glyph"
        }, 
        {
            "location": "/5_estilos/#agregar-una-capa", 
            "text": "En el editor de Maputnik presionamos el bot\u00f3n de  Add Layer  para desplegar el di\u00e1logo de agregar capa al mapa.    Maputnik agregar capa  ID : identificador \u00fanico de la capa. Pondremos  oceanos  Type : tipo de capa. Seleccionar la opci\u00f3n de  Fill  ya que la capa es de tipo pol\u00edgono  Source : identificador del origen de datos. En nuestro caso pondremos  natural_earth  Source Layer : identificador de la capa dentro del origen de datos. Pondremos  ocean  para agregar la capa de los oc\u00e9anos.", 
            "title": "Agregar una capa"
        }, 
        {
            "location": "/5_estilos/#estilizar-una-capa-segun-un-campo", 
            "text": "En esta versi\u00f3n de maputnik (v1.1.0) no est\u00e1 implemantado el estilo  basado en expressiones . Se pueden utilizar los  stops  que actualmente estan  deprecated  para aplicar estilos seg\u00fan el nivel de zoom. En nuestro caso tendremos que utilizar filtros para poder estilizar una capa seg\u00fan un valor de un campo de texto.    Agregar la capa de lineas de Ferry. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  ferrys  Type :  Line  ya que la capa es de tipo l\u00ednea  Source :  natural_earth  Source Layer :  roads  para agregar la capa de carreteras que tambi\u00e9n contiena las lineas de ferry.    Vemos que aparecen todas las carreteras en el mapa.    Filtar la informaci\u00f3n. Selecci\u00f3n la capa de  ferrys  y en el apartado de Filter presionar el bot\u00f3n de  Add filter . En registro que aparece poner la siguiente informaci\u00f3n:     Maputnik agregar filtro a una capa  1\n2\n3\n4\n5 * Cambiar donde dice name por *type*\n\n* Dejar el selector de comparaci\u00f3n en *==*\n\n* Escribir en el campo de valor (que est\u00e1 vacio) *Ferry Route*   Comprobar que s\u00f3lo aparacen las l\u00edneas de Ferry en el mapa.   Question  Hacer lo mismo para agregar la capa de carreteras principales(Major Highway) y secundarias(Secondary Highway).", 
            "title": "Estilizar una capa seg\u00fan un campo"
        }, 
        {
            "location": "/5_estilos/#etiquetar-una-capa", 
            "text": "Agregar la capa de ciudades. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  ciudades_etiquetas  Type :  Symbol  ya que queremos que sea de tipo texto  Source :  natural_earth  Source Layer :  cities  para agregar la capa de ciudades.    Agregar el campo por el que se quiere etiquetar. Seleccionar la capa de  ciudades  y en el apartado de  Text layout properties  en el campo  Field  escribir  {nombre del campo} . En nuestro caso debemos escribir  {NAME} .    Estilizar las etiquetas. En el apartado de  Text paint properties  podemos definir el estilo de las etiquetas. Para los textos podemos definir un Halo para que el teto destaque mejor en nuestro mapa.", 
            "title": "Etiquetar una capa"
        }, 
        {
            "location": "/5_estilos/#utilizar-un-icono-para-simbolizar-nuestra-capa", 
            "text": "Agregar la capa de aeropuertos. Presionar el bot\u00f3n de  Add Layer  y rellenar el formulario con la siguiente informaci\u00f3n:  ID :  aeropuertos  Type :  Symbol  ya que queremos que sea de tipo texto  Source :  natural_earth  Source Layer :  airports  para agregar la capa de aeropuertos.    Agregar el icono. Selecccionar la capa de  aeropuertos  y en el apartado de  Icon layout properties  escribir en el campo  Image   airport_11 . Este nombre debe coincidir con alguna imagen definida en el sprite.    Comprobar que aparecen los aeropuertos en el mapa     Tip  Aqui puede ver la lista de los nombres de las im\u00e1genes del sprite que estamos utilizando  https://github.com/openmaptiles/osm-bright-gl-style/tree/master/icons .", 
            "title": "Utilizar un icono para simbolizar nuestra capa"
        }, 
        {
            "location": "/5_estilos/#ejercicio", 
            "text": "Agregar y aplicar estilo al resto de capas del  natural_earth.mbtiles", 
            "title": "Ejercicio"
        }, 
        {
            "location": "/5_estilos/#exportar-el-estilo-creado", 
            "text": "En el editor de Maputnik en la barra de men\u00fa seleccionamos la opci\u00f3n de  Export  para desplegar el di\u00e1logo de exportaci\u00f3n del estilo.  En el dialogo presionamos el boton de  Download  para descargar el estilo en nuestro ordenador.  Descargamos el archivo y lo renombramos a  natural_earth.json . Luego lo movemos a la carpeta  data  Dentro de la carpeta  data  crear un fichero  config.json . Para m\u00e1s detalles  http://tileserver.readthedocs.io/en/latest/config.html#   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 { \n   styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     } \n   }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Ejecutar el tileserver utilizando el archivo de configuraci\u00f3n creado  1 tileserver-gl-light -c config.test.json -p  8181    Abrir el navegador y escribir  http://localhost:8181 . Aparecer\u00e1 la p\u00e1gina del TileServer donde podemos comprobar nuestro estilo presionando el bot\u00f3n de  Vector  Modificar el archivo  index.html  para que el visor de mapa para cargue los datos de Natural Earth con el estilo creado en Maputnik   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8181/styles/natural-earth/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Exportar el estilo creado"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-datos-data-driven-style", 
            "text": "El estilo basado en datos le permite estilizar los datos en funci\u00f3n de sus propiedades. Por ejemplo, cambiar el radio de un c\u00edrculo en funci\u00f3n de la cantidad de clientes, cambiar el color de un pol\u00edgono de estado seg\u00fan la poblaci\u00f3n o usar la l\u00f3gica condicional para crear etiquetas biling\u00fces.  Para crear estilos basados en datos debemos usar las Mapbox GL JS expressions. En la especificaci\u00f3n de estilo de Mapbox, el valor de cualquier propiedad de dise\u00f1o, propiedad de estilo o filtro se puede especificar como una expresi\u00f3n. Las expresiones definen c\u00f3mo se combinan uno o m\u00e1s valores de propiedad y / o el nivel de zoom actual utilizando operaciones l\u00f3gicas, matem\u00e1ticas, de cadena o de color para producir el valor de propiedad de estilo apropiado o la decisi\u00f3n de filtro.  Para m\u00e1s informaci\u00f3n y ejemplos  https://www.mapbox.com/help/how-map-design-works/#data-driven-styles", 
            "title": "Estilo basado en datos (data-driven style)"
        }, 
        {
            "location": "/5_estilos/#crear-un-estilo-basado-en-datos", 
            "text": "Copiar el estilo  natural_earth.json  en un fichero llamado  natural_earth_2.json", 
            "title": "Crear un estilo basado en datos"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-valores-concretos-de-una-propiedad", 
            "text": "Editar el fichero  natural_earth_2.json  y eliminar las capas con id  secundarias ,  principales  y  ferrys  Entre la capa con id  land  y la capa con id  aeropuertos  crear una capa con id  roads . El color de las l\u00edneas de esta capa varia dependiendo del valor de la propiedad  type .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 { \n     id :   roads , \n     type :   line , \n     source :   local , \n     source-layer :   roads , \n     layout :   { \n         visibility :   visible \n     }, \n     paint :   { \n         line-color :   [ \n             match , \n             [ \n                 get , \n                 type \n             ], \n             Secondary Highway , \n             rgba(206, 32, 79, 1) , \n             Ferry Route , \n             rgba(138, 154, 241, 1) , \n             Major Highway , \n             rgba(20, 52, 232, 1) , \n             #000000 \n         ], \n         line-width :   2 \n     }  },", 
            "title": "Estilo basado en valores concretos de una propiedad"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-el-nivel-del-zoom", 
            "text": "Editar el fichero  natural_earth_2.json  modificar la capa  ciudades_etiquetas  para cambiar el tama\u00f1o del texto basado en el nivel de zoom del mapa y en la propiedad  SCALERANK   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 { \n     id :   ciudades_etiquetas , \n     type :   symbol , \n     source :   local , \n     source-layer :   cities , \n     layout :   { \n     symbol-placement :   point , \n     text-field :   {NAME} , \n     visibility :   visible , \n     text-anchor :   bottom , \n     text-offset :   [ 0 ,   - 1 ], \n     text-size :   [ \n         step , \n         [ zoom ], \n         [ \n         case , \n         [ \n             , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             3 \n         ], \n         18 , \n         0 \n         ], \n         5 , \n         [ \n         case , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             2 \n         ], \n         20 , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             5 \n         ], \n         14 , \n         10 \n         ], \n         8 , \n         [ \n         case , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             2 \n         ], \n         24 , \n         [ \n             = , \n             [ \n             number , \n             [ get ,   SCALERANK ] \n             ], \n             5 \n         ], \n         18 , \n         14 \n         ] \n     ] \n     }, \n     paint :   { \n     text-halo-color :   rgba(253, 253, 253, 1) , \n     text-halo-width :   5 , \n     text-color :   rgba(16, 16, 16, 1) , \n     text-halo-blur :   2 \n     }  }", 
            "title": "Estilo basado en el nivel del zoom"
        }, 
        {
            "location": "/5_estilos/#estilo-basado-en-una-propiedad", 
            "text": "Crear una capa con id  ciudades  y de tipo  circle  entre las capas  aeropuertos  y la capa  ciudades_etiquetas . En esta nueva capa el tama\u00f1o del circulo utilizar\u00e1 directamente el valor de la propiedad  SCALERANK   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 { \n     id :   ciudades , \n     type :   circle , \n     source :   local , \n     source-layer :   cities , \n     layout :   { \n     visibility :   visible \n     }, \n     paint :   { \n     circle-color :   [ \n         match , \n         [ get ,   ADM0CAP ], \n         0 , \n         hsl(285, 75%, 68%) , \n         hsl(0, 96%, 48%) \n     ], \n     circle-radius :   [ - ,   15 ,   [ get , SCALERANK ]] \n     }  },    Agregar el nuevo estilo al fichero de configuraci\u00f3n  config.json  del tileserver-gl   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 { \n   styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     },       natural-earth-2 :   {         style :   natural_earth_2.json ,         tilejson :   {           type :   overlay         }       }     }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Parar  Ctrl+c  y arrancar el tileserver utilizando el archivo de configuraci\u00f3n creado  1 tileserver-gl-light -c config.test.json -p  8181    Modificar el archivo  index.html  para que el visor de mapa para cargue los datos de Natural Earth con el nuevo estilo creado   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 !DOCTYPE html  html  head \n     meta   charset = UTF-8 \n     meta   name = viewport   content = width=device-width, initial-scale=1 \n     title Mapa VT / title \n     link   rel = stylesheet   href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css   / \n     script   src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js / script \n     link   href = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.css   rel = stylesheet   / \n     script   src = https://mapbox-gl-inspect.lukasmartinelli.ch/dist/mapbox-gl-inspect.min.js / script \n     style \n         html ,   body   { \n             margin :   0 ; \n             height :   100 % ; \n         } \n     / style  / head  body   id = map  script \n     var   map   =   new   mapboxgl . Map ({ \n         container :   map ,   // id del elemento HTML que contendr\u00e1 el mapa           style :   http://localhost:8181/styles/natural-earth-2/style.json ,   // Ubicaci\u00f3n del estilo           center :   [ 2.175 ,   41.39 ],   // Ubicaci\u00f3n inicial \n         zoom :   13 ,   // Zoom inicial \n         bearing :   - 45 ,   // \u00c1ngulo de rotaci\u00f3n inicial \n         hash :   true   // Permite ir guardando la posici\u00f3n del mapa en la URL \n     }); \n\n     // Agrega controles de navegaci\u00f3n (zoom, rotaci\u00f3n) al mapa: \n     map . addControl ( new   mapboxgl . NavigationControl ()); \n\n     // Agregar el control de inspecci\u00f3n \n     map . addControl ( new   MapboxInspect ());  / script  / body  / html", 
            "title": "Estilo basado en una propiedad"
        }, 
        {
            "location": "/6_sprites_glyphs/", 
            "text": "Sprites y Glyphs\n\n\nSprites\n\n\n\n\nDefinici\u00f3n\n\n\nUn \nsprite\n es una imagen individual que contiene todos los iconos incluidos en un estilo. Los Sprites se utilizan a menudo en el desarrollo web e incluso en videojuegos para mejorar el rendimiento. Al combinar muchas im\u00e1genes peque\u00f1as en una sola imagen (sprite), puede reducir el n\u00famero de solicitudes necesarias para recuperar todas las im\u00e1genes, mejorar el rendimiento y hacer que su mapa sea m\u00e1s r\u00e1pido.\n\n\nLos Sprites pueden tener un tama\u00f1o m\u00e1ximo de 1024x1024 p\u00edxeles (2048x2048 para pantallas con alta DPI), lo que significa que el sprite completo que contiene todos los iconos debe tener un tama\u00f1o inferior a 1024x1024 p\u00edxeles. Cada sprite tiene un archivo JSON complementario que define cada icono, incluido el tama\u00f1o y la posici\u00f3n del icono dentro del sprite, como indicaciones para cada icono\n\n\nM\u00e1s informaci\u00f3n en \nhttps://www.mapbox.com/help/define-sprite/\n\n\n\n\nLa propiedad de \nsprite\n de un estilo proporciona una URL para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de las propiedades de estilo de fondo, patr\u00f3n de relleno, patr\u00f3n de l\u00ednea e imagen de icono.\n\n\nUna fuente de sprites v\u00e1lida debe suministrar dos tipos de archivos:\n\n\n\n\nIndice\n es un fichero JSON que contiene una descripci\u00f3n de cada imagen contenida en el sprite. El contenido de este archivo debe ser un objeto JSON cuyas claves forman identificadores para usar como valores de las propiedades de estilo anteriores, y cuyos valores son objetos que describen las dimensiones (ancho y propiedades de altura) y la proporci\u00f3n de p\u00edxeles (pixelRatio) de la imagen y su ubicaci\u00f3n dentro del sprite (x e y). Por ejemplo:\n\n\n\n\n1\n2\n{\naerialway-15\n:\n{\nwidth\n:\n15\n,\nheight\n:\n15\n,\nx\n:\n0\n,\ny\n:\n0\n,\npixelRatio\n:\n1\n},\n\n\nairfield-15\n:\n{\nwidth\n:\n15\n,\nheight\n:\n15\n,\nx\n:\n15\n,\ny\n:\n0\n,\npixelRatio\n:\n1\n}}\n\n\n\n\n\n\n\n\n\nImagen\n fichero PNG que contiene los datos del sprite. Por ejemplo:\n\n\n\n\n\n\nC\u00f3mo crear tus propios sprites\n\n\nPara crear los sprites hay que crear ambos archivo el JSON de indice y el PNG que contiene todas las im\u00e1genes, esto de se puede hacer manualmente con un editor de texto y en editor de im\u00e1genes, pero el proceso es lento y laborioso. \n\n\nLo mejor es buscar alg\u00fan generador de sprites, en la web se pueden encontrar m\u00faltiples generadores de sprites para usar en la web que generar el archivo PNG y un archivo CSS que cumple la funci\u00f3n del archivo de indice. Para los mapas con mapbox gl el archivo css no sirve ya que necesitamos el archivo JSON.\n\n\nPara generar sprites basados en ficheros SVG podemos utilizar \nhttps://github.com/gencat/ICGC-createsprites\n un script de Nodejs basado en la librer\u00eda de Mapbox \nspritezero\n que permite generar sprites en @2x y de mayor resoluci\u00f3n para usar en pantallas retina, etc.\n\n\nGlyphs\n\n\nLa propiedad de \nglyphs\n de un estilo proporciona una plantilla de URL para cargar conjuntos de glifos en formato PBF. Sirve para cargar las diferentes fuentes que se utilizar en el mapa. Ejemplo\n\n\n1\nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf\n\n\n\n\n\n\nEsta plantilla de URL debe incluir dos tokens:\n\n\n\n\n\n\n{fontstack}\n Cuando se solicitan glifos, este token se reemplaza con una lista de fuentes separadas por comas de una pila de fuentes especificada en la propiedad de fuente de texto de una capa de s\u00edmbolo.\n\n\n\n\n\n\n{rango}\n Cuando se solicitan glifos, este token se reemplaza con un rango de 256 puntos de c\u00f3digo Unicode. Los rangos reales que se cargan se determinan en tiempo de ejecuci\u00f3n seg\u00fan el texto que se debe mostrar.\n\n\n\n\n\n\nC\u00f3mo crear tus propios glyphs\n\n\nDescargar el proyecto de github \nopenmaptiles/fonts\n\n\n1\n2\n3\n4\n5\nwget https://github.com/openmaptiles/fonts/archive/master.zip\nunzip master.zip\n\ncd\n fonts-master\nnpm install\nnode generate.js\n\n\n\n\n\n\nAl cabo de un rato, podemos ver los resultados en el directorio \n_output\n.\n\n\nSi no queremos generar una tipograf\u00eda determinada, basta con borrar el directorio que la contiene.\nDel mismo modo podemos a\u00f1adir tipograf\u00edas a\u00f1adiendo directorios. Por ejemplo, para generar \"Comic Sans\":\n\n\n1\n2\n3\nrm -rf metropolis noto-sans open-sans pt-sans roboto\ncp -r ../datos/comic-sans-ms .\nnode generate.js\n\n\n\n\n\n\nEl directorio \n_output\n no se borra entre ejecuciones, con lo que habremos conservado todas las fuentes anteriores,\nadem\u00e1s de la reci\u00e9n generada \"Comic Sans\".\n\n\nFinalmente, copiaremos el contenido de \n_output\n al directorio \ntileserver/fonts\n:\n\n\n1\ncp -r _output/* ../tileserver/fonts\n\n\n\n\n\n\nHabr\u00e1 que reiniciar el tileserver para que cargue las nuevas tipograf\u00edas.\n\n\nC\u00f3mo utilizar los sprites y glyphs en el estilo\n\n\nEn el fichero de estilo indicar la URL tanto de los sprites como de los glyphs.\n\n\n25\n26\nsprite\n:\n \nhttps://openmaptiles.github.io/osm-bright-gl-style/sprite\n,\n\n\nglyphs\n:\n \nhttps://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo\n,\n\n\n\n\n\n\n\nPara descargar los archivos de sprites escribiremos lo siguiente en nuestro terminal\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nmkdir sprites\n\ncd\n sprites\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.png\n\n\n\n\n\n\nIr a la carpeta de data \n\n\n1\ncd\n ..\n\n\n\n\n\n\nModificar el fichero \nconfig.json\n del tileserver-gl para agregar la ruta donde se encuentran los sprites y los glyphs\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n{\n\n\n  \noptions\n:\n{\n\n\n    \npaths\n:\n{\n\n\n      \nsprites\n:\n \nsprites\n,\n\n\n      \nfonts\n:\n \nfonts\n\n\n    \n}\n\n\n  \n},\n\n\n  \nstyles\n:\n \n{\n\n    \nnatural-earth\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n},\n\n    \nnatural-earth-2\n:\n \n{\n\n      \nstyle\n:\n \nnatural_earth_2.json\n,\n\n      \ntilejson\n:\n \n{\n\n        \ntype\n:\n \noverlay\n\n      \n}\n\n    \n}\n\n  \n},\n\n  \ndata\n:\n \n{\n\n    \nnatural_earth\n:\n \n{\n\n      \nmbtiles\n:\n \nnatural_earth.mbtiles\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nModificar el fichero \nnatural_earth_2.json\n para cargar los sprites propios. En este caso cargaremos los sprites con resoluci\u00f3n para retina.\n\n\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n.....\n\n\nsources\n:\n \n{\n\n    \nlocal\n:\n \n{\n\n      \ntype\n:\n \nvector\n,\n\n      \nurl\n:\n \nhttp://localhost:8181/data/natural_earth.json\n\n    \n}\n\n  \n},\n\n\n  \nsprite\n:\n \nsprite@2\n,\n\n\n  \nglyphs\n:\n \nfonts/{fontstack}/{range}.pbf\n,\n\n\n  \nlayers\n:\n \n[\n\n    \n{\n\n \n.....\n\n\n\n\n\n\n\nReiniciar el tileserver (\nCtrl+c\n)\n\n\n1\ntileserver-gl-light config.json -p \n8181\n\n\n\n\n\n\n\n\n\nBonus\n\n\nGenerar una fuente de glyphs a partir de un conjunto de iconos de SVG.\n\n\nPara transformar un conjunto de iconos SVG en una fuente se pueden utilizar diferentes programas. Aqui un listado de algunas webs que permiten generar fuentes:\n\n\n\n\nhttps://icomoon.io\n\n\nhttp://fontello.com/\n\n\nhttps://glyphter.com/\n\n\nhttp://fontastic.me/\n\n\n\n\nTambi\u00e9n podemos generar una fuente propia utilizando el programa \nhttps://github.com/gencat/ICGC-fonticon-generator\n\n\nUna vez generada la fuente proceder con los pasos indicados en \nC\u00f3mo crear tus propios glyphs\n\n\nEjemplo\n\n\nGenerar la fuente por defecto del ICGC-fonticon-generator. Se genera una fuente llamada Geostart-Regular. \n\n\nGenerar los glyphs para esta fuente. Se genera una carpeta llamada Geostart Regular.\n\n\nCopiar la carpeta Geostart Regular en el directorio fonts del tileserver.\n\n\nReiniciar el tileserver\n\n\nEn nuestro estilo podemos modificar la capa de \naeropuertos\n para que en lugar de mostrar un icono de una imagen del sprite, nuestre un icono procedente de nuestra fuente.\n\n\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n...\n\n\n{\n\n  \nid\n:\n \naeropuertos\n,\n\n  \ntype\n:\n \nsymbol\n,\n\n  \nsource\n:\n \nlocal\n,\n\n  \nsource-layer\n:\n \nairports\n,\n\n  \npaint\n:\n \n{\n\n\n    \ntext-color\n:\n \n#fabada\n\n\n  \n},\n\n  \nlayout\n:\n \n{\n\n\n    \nicon-image\n:\n \n,\n\n\n    \ntext-field\n:\n \n,\n,\n\n\n    \nsymbol-placement\n:\n \npoint\n,\n\n\n    \ntext-font\n:\n \n[\n\n\n      \nGeostart Regular\n\n\n    \n],\n\n\n    \ntext-size\n:\n \n25\n\n\n  \n},\n\n  \nminzoom\n:\n \n0\n\n\n}\n\n\n....\n\n\n\n\n\nComo resultado se deben ver los aeropuertos con el icono correspondiente\n\n\n\n\nUna ventaja de utilizar iconos procedentes de glyphs sobre sprites es que funcionan como una fuente y se pueden cambiar de tama\u00f1o y color.", 
            "title": "6. Sprites y Glyphs"
        }, 
        {
            "location": "/6_sprites_glyphs/#sprites-y-glyphs", 
            "text": "", 
            "title": "Sprites y Glyphs"
        }, 
        {
            "location": "/6_sprites_glyphs/#sprites", 
            "text": "Definici\u00f3n  Un  sprite  es una imagen individual que contiene todos los iconos incluidos en un estilo. Los Sprites se utilizan a menudo en el desarrollo web e incluso en videojuegos para mejorar el rendimiento. Al combinar muchas im\u00e1genes peque\u00f1as en una sola imagen (sprite), puede reducir el n\u00famero de solicitudes necesarias para recuperar todas las im\u00e1genes, mejorar el rendimiento y hacer que su mapa sea m\u00e1s r\u00e1pido.  Los Sprites pueden tener un tama\u00f1o m\u00e1ximo de 1024x1024 p\u00edxeles (2048x2048 para pantallas con alta DPI), lo que significa que el sprite completo que contiene todos los iconos debe tener un tama\u00f1o inferior a 1024x1024 p\u00edxeles. Cada sprite tiene un archivo JSON complementario que define cada icono, incluido el tama\u00f1o y la posici\u00f3n del icono dentro del sprite, como indicaciones para cada icono  M\u00e1s informaci\u00f3n en  https://www.mapbox.com/help/define-sprite/   La propiedad de  sprite  de un estilo proporciona una URL para cargar im\u00e1genes peque\u00f1as para usar en la representaci\u00f3n de las propiedades de estilo de fondo, patr\u00f3n de relleno, patr\u00f3n de l\u00ednea e imagen de icono.  Una fuente de sprites v\u00e1lida debe suministrar dos tipos de archivos:   Indice  es un fichero JSON que contiene una descripci\u00f3n de cada imagen contenida en el sprite. El contenido de este archivo debe ser un objeto JSON cuyas claves forman identificadores para usar como valores de las propiedades de estilo anteriores, y cuyos valores son objetos que describen las dimensiones (ancho y propiedades de altura) y la proporci\u00f3n de p\u00edxeles (pixelRatio) de la imagen y su ubicaci\u00f3n dentro del sprite (x e y). Por ejemplo:   1\n2 { aerialway-15 : { width : 15 , height : 15 , x : 0 , y : 0 , pixelRatio : 1 },  airfield-15 : { width : 15 , height : 15 , x : 15 , y : 0 , pixelRatio : 1 }}     Imagen  fichero PNG que contiene los datos del sprite. Por ejemplo:", 
            "title": "Sprites"
        }, 
        {
            "location": "/6_sprites_glyphs/#como-crear-tus-propios-sprites", 
            "text": "Para crear los sprites hay que crear ambos archivo el JSON de indice y el PNG que contiene todas las im\u00e1genes, esto de se puede hacer manualmente con un editor de texto y en editor de im\u00e1genes, pero el proceso es lento y laborioso.   Lo mejor es buscar alg\u00fan generador de sprites, en la web se pueden encontrar m\u00faltiples generadores de sprites para usar en la web que generar el archivo PNG y un archivo CSS que cumple la funci\u00f3n del archivo de indice. Para los mapas con mapbox gl el archivo css no sirve ya que necesitamos el archivo JSON.  Para generar sprites basados en ficheros SVG podemos utilizar  https://github.com/gencat/ICGC-createsprites  un script de Nodejs basado en la librer\u00eda de Mapbox  spritezero  que permite generar sprites en @2x y de mayor resoluci\u00f3n para usar en pantallas retina, etc.", 
            "title": "C\u00f3mo crear tus propios sprites"
        }, 
        {
            "location": "/6_sprites_glyphs/#glyphs", 
            "text": "La propiedad de  glyphs  de un estilo proporciona una plantilla de URL para cargar conjuntos de glifos en formato PBF. Sirve para cargar las diferentes fuentes que se utilizar en el mapa. Ejemplo  1 https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf   Esta plantilla de URL debe incluir dos tokens:    {fontstack}  Cuando se solicitan glifos, este token se reemplaza con una lista de fuentes separadas por comas de una pila de fuentes especificada en la propiedad de fuente de texto de una capa de s\u00edmbolo.    {rango}  Cuando se solicitan glifos, este token se reemplaza con un rango de 256 puntos de c\u00f3digo Unicode. Los rangos reales que se cargan se determinan en tiempo de ejecuci\u00f3n seg\u00fan el texto que se debe mostrar.", 
            "title": "Glyphs"
        }, 
        {
            "location": "/6_sprites_glyphs/#como-crear-tus-propios-glyphs", 
            "text": "Descargar el proyecto de github  openmaptiles/fonts  1\n2\n3\n4\n5 wget https://github.com/openmaptiles/fonts/archive/master.zip\nunzip master.zip cd  fonts-master\nnpm install\nnode generate.js   Al cabo de un rato, podemos ver los resultados en el directorio  _output .  Si no queremos generar una tipograf\u00eda determinada, basta con borrar el directorio que la contiene.\nDel mismo modo podemos a\u00f1adir tipograf\u00edas a\u00f1adiendo directorios. Por ejemplo, para generar \"Comic Sans\":  1\n2\n3 rm -rf metropolis noto-sans open-sans pt-sans roboto\ncp -r ../datos/comic-sans-ms .\nnode generate.js   El directorio  _output  no se borra entre ejecuciones, con lo que habremos conservado todas las fuentes anteriores,\nadem\u00e1s de la reci\u00e9n generada \"Comic Sans\".  Finalmente, copiaremos el contenido de  _output  al directorio  tileserver/fonts :  1 cp -r _output/* ../tileserver/fonts   Habr\u00e1 que reiniciar el tileserver para que cargue las nuevas tipograf\u00edas.", 
            "title": "C\u00f3mo crear tus propios glyphs"
        }, 
        {
            "location": "/6_sprites_glyphs/#como-utilizar-los-sprites-y-glyphs-en-el-estilo", 
            "text": "En el fichero de estilo indicar la URL tanto de los sprites como de los glyphs.  25\n26 sprite :   https://openmaptiles.github.io/osm-bright-gl-style/sprite ,  glyphs :   https://free.tilehosting.com/fonts/{fontstack}/{range}.pbf?key=RiS4gsgZPZqeeMlIyxFo ,    Para descargar los archivos de sprites escribiremos lo siguiente en nuestro terminal  1\n2\n3\n4\n5\n6\n7\n8 mkdir sprites cd  sprites\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%401.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%402.png\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.json\nwget https://raw.githubusercontent.com/gencat/ICGC-createsprites/master/output/sprite%404.png   Ir a la carpeta de data   1 cd  ..   Modificar el fichero  config.json  del tileserver-gl para agregar la ruta donde se encuentran los sprites y los glyphs   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 {     options : {       paths : {         sprites :   sprites ,         fonts :   fonts       }     },     styles :   { \n     natural-earth :   { \n       style :   natural_earth.json , \n       tilejson :   { \n         type :   overlay \n       } \n     }, \n     natural-earth-2 :   { \n       style :   natural_earth_2.json , \n       tilejson :   { \n         type :   overlay \n       } \n     } \n   }, \n   data :   { \n     natural_earth :   { \n       mbtiles :   natural_earth.mbtiles \n     } \n   }  }    Modificar el fichero  natural_earth_2.json  para cargar los sprites propios. En este caso cargaremos los sprites con resoluci\u00f3n para retina.  18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 .....  sources :   { \n     local :   { \n       type :   vector , \n       url :   http://localhost:8181/data/natural_earth.json \n     } \n   },     sprite :   sprite@2 ,     glyphs :   fonts/{fontstack}/{range}.pbf ,     layers :   [ \n     { \n  .....    Reiniciar el tileserver ( Ctrl+c )  1 tileserver-gl-light config.json -p  8181     Bonus", 
            "title": "C\u00f3mo utilizar los sprites y glyphs en el estilo"
        }, 
        {
            "location": "/6_sprites_glyphs/#generar-una-fuente-de-glyphs-a-partir-de-un-conjunto-de-iconos-de-svg", 
            "text": "Para transformar un conjunto de iconos SVG en una fuente se pueden utilizar diferentes programas. Aqui un listado de algunas webs que permiten generar fuentes:   https://icomoon.io  http://fontello.com/  https://glyphter.com/  http://fontastic.me/   Tambi\u00e9n podemos generar una fuente propia utilizando el programa  https://github.com/gencat/ICGC-fonticon-generator  Una vez generada la fuente proceder con los pasos indicados en  C\u00f3mo crear tus propios glyphs", 
            "title": "Generar una fuente de glyphs a partir de un conjunto de iconos de SVG."
        }, 
        {
            "location": "/6_sprites_glyphs/#ejemplo", 
            "text": "Generar la fuente por defecto del ICGC-fonticon-generator. Se genera una fuente llamada Geostart-Regular.   Generar los glyphs para esta fuente. Se genera una carpeta llamada Geostart Regular.  Copiar la carpeta Geostart Regular en el directorio fonts del tileserver.  Reiniciar el tileserver  En nuestro estilo podemos modificar la capa de  aeropuertos  para que en lugar de mostrar un icono de una imagen del sprite, nuestre un icono procedente de nuestra fuente.  76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96 ...  { \n   id :   aeropuertos , \n   type :   symbol , \n   source :   local , \n   source-layer :   airports , \n   paint :   {       text-color :   #fabada     }, \n   layout :   {       icon-image :   ,       text-field :   , ,       symbol-placement :   point ,       text-font :   [         Geostart Regular       ],       text-size :   25     }, \n   minzoom :   0  }  ....   \nComo resultado se deben ver los aeropuertos con el icono correspondiente   Una ventaja de utilizar iconos procedentes de glyphs sobre sprites es que funcionan como una fuente y se pueden cambiar de tama\u00f1o y color.", 
            "title": "Ejemplo"
        }, 
        {
            "location": "/7_servidor_dinamico/", 
            "text": "C\u00f3mo servir datos din\u00e1micos\n\n\nPartiremos de unos datos con los distritos, barrios y secciones censales de Barcelona.\nLos datos est\u00e1n en \ndatos/bcn_geodata.sql\n.\n\n\n\n\nNote\n\n\nEl origen de los datos es Ajuntament de Barcelona CC-by (\nhttp://w20.bcn.cat/cartobcn/\n).\nMart\u00edn Gonz\u00e1lez los convirti\u00f3 a GeoJSON (\nhttps://github.com/martgnz/bcn-geodata\n).\nPara el taller los hemos convertido de GeoJSON a PostGIS.\n\n\n\n\nCargarlos en PostGIS:\n\n\n1\npsql \n datos/bcn_geodata.sql\n\n\n\n\n\n\nSe crear\u00e1 una BDD \nbcn_geodata\n con las tablas \nbarrios\n, \ndistritos\n y \nseccion_censal\n.\nSe puede acceder a esta BDD con el usuario \nuser\n, password \nuser\n.\n\n\nUna vez con los datos cargados en PostGIS, usaremos \ntegola\n para levantar un servidor de teselas\nvectoriales partir de una BDD PostGIS.\n\n\nInstalando Tegola\n\n\nTegola consiste en un solo fichero ejecutable. La instalaci\u00f3n consiste en descargarse un zip, descomprimirlo, y copiar\nel fichero ejecutable resultante en una ruta localizable:\n\n\n1\n2\n3\nwget https://github.com/go-spatial/tegola/releases/download/v0.6.3/tegola_linux_amd64.zip\nunzip tegola_linux_amd64.zip\nsudo mv tegola_linux_amd64 /usr/local/bin/tegola\n\n\n\n\n\n\nComprobar que puede ejecutarse tegola correctamente, y borrar el zip:\n\n\n1\n2\ntegola -h \n# comprobar instalacion\n\nrm tegola_linux_amd64.zip\n\n\n\n\n\n\nConfigurando Tegola\n\n\nTegola necesita de un \nfichero de configuraci\u00f3n en formato toml\n para funcionar.\nEn \u00e9l estableceremos los par\u00e1metros de conexi\u00f3n con la BDD y las caracter\u00edsticas de las capas que queremos servir.\n\n\nCreemos pues un directorio llamado \ntegola\n, y en \u00e9l, un fichero llamado \nconfig.toml\n.\n\n\nLo primero es definir una secci\u00f3n con el puerto que usaremos para levantar el servicio: \n\n\n1\n2\n[webserver]\n\n\nport\n \n=\n \n:8083\n\n\n\n\n\n\n\nA continuaci\u00f3n definimos la conexi\u00f3n con la BDD en una secci\u00f3n \nproviders\n. Dentro del provider, definimos las capas de\ndatos que queremos obtener de la BDD. En nuestro caso son muy sencillas:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n[[providers]]\n\n\nname\n \n=\n \npostgis\n\n\ntype\n \n=\n \npostgis\n\n\nhost\n \n=\n \nlocalhost\n\n\nport\n \n=\n \n5432\n\n\ndatabase\n \n=\n \nbcn_geodata\n\n\nuser\n \n=\n \nuser\n\n\npassword\n \n=\n \nuser\n\n\n    \n[[providers.layers]]\n\n    \nname\n \n=\n \ndistritos\n\n\n    tablename = \ndistritos\n\n\n    \n[[providers.layers]]\n\n    \nname\n \n=\n \nbarrios\n\n\n    tablename = \nbarrios\n\n\n    \n[[providers.layers]]\n\n    \nname\n \n=\n \nseccion_censal\n\n\n    tablename = \nseccion_censal\n\n\n\n\n\n\n\nEn estas \nproviders.layers\n tambi\u00e9n se podr\u00edan seleccionar qu\u00e9 columnas queremos obtener, o incluso indicar una consulta SQL para\ngenerar la capa, haciendo JOIN de varias tablas, aplicando operaciones espaciales, etc. En nuestro caso, servimos las\ntablas tal cual.\n\n\nFinalmente, creamos una secci\u00f3n \nmaps\n, que consiste en un nombre, y una serie de capas de informaci\u00f3n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n[[maps]]\n\n\nname\n \n=\n \nbcn_geodata\n\n\nattribution\n \n=\n \nCC-by Ajuntament de Barcelona\n\n\ncenter\n \n=\n \n[2.175, 41.39, 13.0]\n\n\nbounds\n \n=\n \n[1.898, 41.246, 2.312, 41.533]\n\n\n    \n[[maps.layers]]\n\n    \nprovider_layer\n \n=\n \npostgis.seccion_censal\n\n\n    dont_simplify = true\n\n\n    min_zoom = 11\n\n\n    max_zoom = 16\n\n\n    \n[[maps.layers]]\n\n    \nprovider_layer\n \n=\n \npostgis.barrios\n\n\n    dont_simplify = true\n\n\n    min_zoom = 10\n\n\n    max_zoom = 16\n\n\n    \n[[maps.layers]]\n\n    \nprovider_layer\n \n=\n \npostgis.distritos\n\n\n    dont_simplify = true\n\n\n    min_zoom = 0\n\n\n    max_zoom = 16\n\n\n\n\n\n\n\nEn estas \nmaps.layers\n se indican par\u00e1metros para la generaci\u00f3n de las VT, como el rango de niveles de zoom en las que\nser\u00e1n visibles, si se simplificar\u00e1 o no la geometr\u00eda.\n\n\nEn la configuraci\u00f3n tambi\u00e9n existe la posibilidad de activar una cach\u00e9 en disco, en s3 o en redis, as\u00ed como comandos para\ninvalidar partes de la cach\u00e9. En nuestro caso, no hemos usado cach\u00e9.\n\n\nArrancando tegola\n\n\nArrancamos el servicio desde el directorio donde hayamos guardato \nconfig.toml\n:\n\n\n1\n2\ncd\n tegola\ntegola serve\n\n\n\n\n\n\nY abrimos \nhttp://localhost:8083\n :\n\n\n\n\nActivando \"Inspect Features\" podremos ver los atributos de cada elemento.\n\n\nLas teselas est\u00e1n disponibles en: \nhttp://localhost:8083/maps/bcn_geodata/{z}/{x}/{y}.pbf\n\n\nIncorporando los datos en el visor de Barcelona\n\n\nA\u00f1adiremos el siguiente c\u00f3digo javascript a \nbarcelona.html\n para incorporar el nuevo origen de datos, y una simbolizaci\u00f3n b\u00e1sica para mostrar las secciones censales:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n    \nmap\n.\non\n(\nload\n,\n \nfunction\n()\n \n{\n\n        \nmap\n.\naddSource\n(\nbcn_geodata\n,\n \n{\n\n            \ntype\n:\n \nvector\n,\n\n            \ntiles\n:\n \n[\nhttp://localhost:8083/maps/bcn_geodata/{z}/{x}/{y}.pbf\n]\n\n        \n});\n\n\n        \nmap\n.\naddLayer\n({\n\n            \nid\n:\n \nseccion_censal\n,\n\n            \nsource\n:\n \nbcn_geodata\n,\n\n            \nsource-layer\n:\n \nseccion_censal\n,\n\n            \ntype\n:\n \nfill\n,\n\n            \npaint\n:\n \n{\n\n                \nfill-opacity\n:\n \n0.6\n,\n\n                \nfill-color\n:\n \n#fcc\n,\n\n                \nfill-outline-color\n:\n \n#000\n\n            \n}\n\n        \n});\n\n    \n});\n\n\n\n\n\n\n\n\n\nTem\u00e1tico avanzado\n\n\nExpresiones matem\u00e1ticas\n\n\nEn las tablas tenemos los campos de poblaci\u00f3n divididos en hombres (\nhomes\n) y mujeres (\ndones\n), as\u00ed como el \u00e1rea en\nm\u00b2 de cada secci\u00f3n. Con estos datos, podemos calcular la densidad de poblaci\u00f3n en habitantes/km\u00b2 seg\u00fan la f\u00f3rmula:\n\n\n1\ndensidad = (homes+dones)/(area/1000000)\n\n\n\n\n\n\nEl estilo de mapbox-gl permite expresar \noperaciones matem\u00e1ticas usando expresiones\n,\nde la forma:\n\n\n\n\n[\"+\", [\"get\", \"homes\"], [\"get\", \"dones\"]]\n para sumar la poblaci\u00f3n de hombres y de mujeres\n\n\n[\"/\", [\"get\", \"area\"], 1000000]\n para pasar el \u00e1rea de m\u00b2 a km\u00b2\n\n\n\n\nY, combinando ambas, obtenemos la densidad de poblaci\u00f3n en habitantes/km\u00b2:\n\n\n1\n2\n3\n4\n[\n/\n,\n\n    \n[\n+\n,\n \n[\nget\n,\n \nhomes\n],\n \n[\nget\n,\n \ndones\n]],\n\n    \n[\n/\n,\n \n[\nget\n,\n \narea\n],\n \n1000000\n]\n\n\n]\n\n\n\n\n\n\n\nRampas de color\n\n\nAs\u00ed mismo, las expresiones de los estilos de mapbox-gl nos permiten \naplicar un n\u00famero discreto de valores de salida a\nrangos de entrada\n.\nLas definiciones del manual sin un ejemplo concreto son algo dif\u00edciles de leer:\n\n\n1\n2\n3\n4\n5\n6\n[\nstep\n,\n\n    \ninput:\n \nnumber\n,\n\n    \nstop_output_\n0\n:\n \nOutputType\n,\n\n    \nstop_input_\n1\n:\n \nnumber\n,\n \nstop_output_\n1\n:\n \nOutputType\n,\n\n    \nstop_input_n:\n \nnumber\n,\n \nstop_output_n:\n \nOutputType\n,\n \n...\n\n\n]\n:\n \nOutputType\n  \n\n\n\n\n\n\nPero supongamos que queremos aplicar esta expresi\u00f3n para asignar tres colores en funci\u00f3n de rangos de densidad (\n 10.000 hab/km\u00b2\n,\n\nde 10.000 a 25.000 hab/km\u00b2\n, y \n 25.000 hab/km\u00b2\n), la expresi\u00f3n ser\u00eda:\n\n\n1\n2\n3\n4\n5\n6\n[\nstep\n,\n\n    \n[\nget\n,\n \ndensidad\n],\n\n    \nColor_1\n,\n\n    \n10000\n,\n \nColor_2\n,\n\n    \n25000\n,\n \nColor_3\n\n\n]\n\n\n\n\n\n\n\nM\u00e1s sencillo de lo que parec\u00eda.\n\n\nCombinando ambas expresiones\n\n\nPodemos combinar ambas expresiones: \"calcula la densidad y luego asigna un color en funci\u00f3n de su valor\"\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n[\nstep\n,\n\n    \n[\n/\n,\n\n        \n[\n+\n,\n \n[\nget\n,\n \nhomes\n],\n \n[\nget\n,\n \ndones\n]],\n\n        \n[\n/\n,\n \n[\nget\n,\n \narea\n],\n \n1000000\n]\n\n    \n],\n\n    \n#3d5941\n,\n\n    \n17703\n,\n \n#778868\n,\n\n    \n29678\n,\n \n#b5b991\n,\n\n    \n37617\n,\n \n#f6edbd\n,\n\n    \n46016\n,\n \n#edbb8a\n,\n\n    \n54401\n,\n \n#de8a5a\n,\n\n    \n66570\n,\n \n#ca562c\n\n\n]\n\n\n\n\n\n\n\n\n\nTip\n\n\nLos valores de corte para los diferentes colore se han obtenido calculando los cuantiles con PostgreSQL:\n\n\n1\n2\n3\n4\n5\n6\n7\nSELECT\n\n\nntile\n,\n\n\nCAST\n(\nmin\n(\ndensitat\n)\n \nAS\n \nINTEGER\n)\n  \nAS\n \nminAmount\n,\n\n\nCAST\n(\nmax\n(\ndensitat\n)\n \nAS\n \nINTEGER\n)\n  \nAS\n \nmaxAmount\n\n\nFROM\n \n(\nSELECT\n \n(\nhomes\n+\ndones\n)\n/\n(\narea\n/\n1000000\n)\n \nas\n \ndensitat\n,\n \nntile\n(\n7\n)\n \nOVER\n \n(\nORDER\n \nBY\n \n(\nhomes\n+\ndones\n)\n/\n(\narea\n/\n1000000\n))\n \nAS\n \nntile\n \nFROM\n \nseccion_censal\n)\n \nx\n\n\nGROUP\n \nBY\n \nntile\n\n\nORDER\n \nBY\n \nntile\n;\n\n\n\n\n\n\n\nY la rampa de color y sus valores RGB de cada color se han obtenido de \ncarto-colors\n,\nque a su vez est\u00e1n inspirados en ColorBrewer. \n\n\n\n\nAplicada a la propiedad \nfill-color\n del estilo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n    \nmap\n.\naddLayer\n({\n\n        \nid\n:\n \nseccion_censal\n,\n\n        \nsource\n:\n \nbcn_geodata\n,\n\n        \nsource-layer\n:\n \nseccion_censal\n,\n\n        \ntype\n:\n \nfill\n,\n\n        \npaint\n:\n \n{\n\n            \nfill-opacity\n:\n \n0.75\n,\n\n            \nfill-color\n:\n \n[\nstep\n,\n\n                \n[\n/\n,\n\n                    \n[\n+\n,\n \n[\nget\n,\n \nhomes\n],\n \n[\nget\n,\n \ndones\n]],\n\n                    \n[\n/\n,\n \n[\nget\n,\n \narea\n],\n \n1000000\n]\n\n                \n],\n\n                \n#3d5941\n,\n\n                \n17703\n,\n \n#778868\n,\n\n                \n29678\n,\n \n#b5b991\n,\n\n                \n37617\n,\n \n#f6edbd\n,\n\n                \n46016\n,\n \n#edbb8a\n,\n\n                \n54401\n,\n \n#de8a5a\n,\n\n                \n66570\n,\n \n#ca562c\n\n            \n],\n\n            \nfill-outline-color\n:\n \n#000\n\n        \n}\n\n    \n});\n\n\n\n\n\n\n\nObtendremos:\n\n\n\n\nReto: A\u00f1adir extrusi\u00f3n 3D\n\n\nAplicar una extrusi\u00f3n a cada secci\u00f3n censal de altura proporcional a su densidad de poblaci\u00f3n:", 
            "title": "7. C\u00f3mo servir datos din\u00e1micos"
        }, 
        {
            "location": "/7_servidor_dinamico/#como-servir-datos-dinamicos", 
            "text": "Partiremos de unos datos con los distritos, barrios y secciones censales de Barcelona.\nLos datos est\u00e1n en  datos/bcn_geodata.sql .   Note  El origen de los datos es Ajuntament de Barcelona CC-by ( http://w20.bcn.cat/cartobcn/ ).\nMart\u00edn Gonz\u00e1lez los convirti\u00f3 a GeoJSON ( https://github.com/martgnz/bcn-geodata ).\nPara el taller los hemos convertido de GeoJSON a PostGIS.   Cargarlos en PostGIS:  1 psql   datos/bcn_geodata.sql   Se crear\u00e1 una BDD  bcn_geodata  con las tablas  barrios ,  distritos  y  seccion_censal .\nSe puede acceder a esta BDD con el usuario  user , password  user .  Una vez con los datos cargados en PostGIS, usaremos  tegola  para levantar un servidor de teselas\nvectoriales partir de una BDD PostGIS.", 
            "title": "C\u00f3mo servir datos din\u00e1micos"
        }, 
        {
            "location": "/7_servidor_dinamico/#instalando-tegola", 
            "text": "Tegola consiste en un solo fichero ejecutable. La instalaci\u00f3n consiste en descargarse un zip, descomprimirlo, y copiar\nel fichero ejecutable resultante en una ruta localizable:  1\n2\n3 wget https://github.com/go-spatial/tegola/releases/download/v0.6.3/tegola_linux_amd64.zip\nunzip tegola_linux_amd64.zip\nsudo mv tegola_linux_amd64 /usr/local/bin/tegola   Comprobar que puede ejecutarse tegola correctamente, y borrar el zip:  1\n2 tegola -h  # comprobar instalacion \nrm tegola_linux_amd64.zip", 
            "title": "Instalando Tegola"
        }, 
        {
            "location": "/7_servidor_dinamico/#configurando-tegola", 
            "text": "Tegola necesita de un  fichero de configuraci\u00f3n en formato toml  para funcionar.\nEn \u00e9l estableceremos los par\u00e1metros de conexi\u00f3n con la BDD y las caracter\u00edsticas de las capas que queremos servir.  Creemos pues un directorio llamado  tegola , y en \u00e9l, un fichero llamado  config.toml .  Lo primero es definir una secci\u00f3n con el puerto que usaremos para levantar el servicio:   1\n2 [webserver]  port   =   :8083    A continuaci\u00f3n definimos la conexi\u00f3n con la BDD en una secci\u00f3n  providers . Dentro del provider, definimos las capas de\ndatos que queremos obtener de la BDD. En nuestro caso son muy sencillas:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 [[providers]]  name   =   postgis  type   =   postgis  host   =   localhost  port   =   5432  database   =   bcn_geodata  user   =   user  password   =   user \n\n     [[providers.layers]] \n     name   =   distritos      tablename =  distritos \n\n     [[providers.layers]] \n     name   =   barrios      tablename =  barrios \n\n     [[providers.layers]] \n     name   =   seccion_censal      tablename =  seccion_censal    En estas  providers.layers  tambi\u00e9n se podr\u00edan seleccionar qu\u00e9 columnas queremos obtener, o incluso indicar una consulta SQL para\ngenerar la capa, haciendo JOIN de varias tablas, aplicando operaciones espaciales, etc. En nuestro caso, servimos las\ntablas tal cual.  Finalmente, creamos una secci\u00f3n  maps , que consiste en un nombre, y una serie de capas de informaci\u00f3n:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 [[maps]]  name   =   bcn_geodata  attribution   =   CC-by Ajuntament de Barcelona  center   =   [2.175, 41.39, 13.0]  bounds   =   [1.898, 41.246, 2.312, 41.533] \n\n     [[maps.layers]] \n     provider_layer   =   postgis.seccion_censal      dont_simplify = true      min_zoom = 11      max_zoom = 16 \n\n     [[maps.layers]] \n     provider_layer   =   postgis.barrios      dont_simplify = true      min_zoom = 10      max_zoom = 16 \n\n     [[maps.layers]] \n     provider_layer   =   postgis.distritos      dont_simplify = true      min_zoom = 0      max_zoom = 16    En estas  maps.layers  se indican par\u00e1metros para la generaci\u00f3n de las VT, como el rango de niveles de zoom en las que\nser\u00e1n visibles, si se simplificar\u00e1 o no la geometr\u00eda.  En la configuraci\u00f3n tambi\u00e9n existe la posibilidad de activar una cach\u00e9 en disco, en s3 o en redis, as\u00ed como comandos para\ninvalidar partes de la cach\u00e9. En nuestro caso, no hemos usado cach\u00e9.", 
            "title": "Configurando Tegola"
        }, 
        {
            "location": "/7_servidor_dinamico/#arrancando-tegola", 
            "text": "Arrancamos el servicio desde el directorio donde hayamos guardato  config.toml :  1\n2 cd  tegola\ntegola serve   Y abrimos  http://localhost:8083  :   Activando \"Inspect Features\" podremos ver los atributos de cada elemento.  Las teselas est\u00e1n disponibles en:  http://localhost:8083/maps/bcn_geodata/{z}/{x}/{y}.pbf", 
            "title": "Arrancando tegola"
        }, 
        {
            "location": "/7_servidor_dinamico/#incorporando-los-datos-en-el-visor-de-barcelona", 
            "text": "A\u00f1adiremos el siguiente c\u00f3digo javascript a  barcelona.html  para incorporar el nuevo origen de datos, y una simbolizaci\u00f3n b\u00e1sica para mostrar las secciones censales:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18      map . on ( load ,   function ()   { \n         map . addSource ( bcn_geodata ,   { \n             type :   vector , \n             tiles :   [ http://localhost:8083/maps/bcn_geodata/{z}/{x}/{y}.pbf ] \n         }); \n\n         map . addLayer ({ \n             id :   seccion_censal , \n             source :   bcn_geodata , \n             source-layer :   seccion_censal , \n             type :   fill , \n             paint :   { \n                 fill-opacity :   0.6 , \n                 fill-color :   #fcc , \n                 fill-outline-color :   #000 \n             } \n         }); \n     });", 
            "title": "Incorporando los datos en el visor de Barcelona"
        }, 
        {
            "location": "/7_servidor_dinamico/#tematico-avanzado", 
            "text": "", 
            "title": "Tem\u00e1tico avanzado"
        }, 
        {
            "location": "/7_servidor_dinamico/#expresiones-matematicas", 
            "text": "En las tablas tenemos los campos de poblaci\u00f3n divididos en hombres ( homes ) y mujeres ( dones ), as\u00ed como el \u00e1rea en\nm\u00b2 de cada secci\u00f3n. Con estos datos, podemos calcular la densidad de poblaci\u00f3n en habitantes/km\u00b2 seg\u00fan la f\u00f3rmula:  1 densidad = (homes+dones)/(area/1000000)   El estilo de mapbox-gl permite expresar  operaciones matem\u00e1ticas usando expresiones ,\nde la forma:   [\"+\", [\"get\", \"homes\"], [\"get\", \"dones\"]]  para sumar la poblaci\u00f3n de hombres y de mujeres  [\"/\", [\"get\", \"area\"], 1000000]  para pasar el \u00e1rea de m\u00b2 a km\u00b2   Y, combinando ambas, obtenemos la densidad de poblaci\u00f3n en habitantes/km\u00b2:  1\n2\n3\n4 [ / , \n     [ + ,   [ get ,   homes ],   [ get ,   dones ]], \n     [ / ,   [ get ,   area ],   1000000 ]  ]", 
            "title": "Expresiones matem\u00e1ticas"
        }, 
        {
            "location": "/7_servidor_dinamico/#rampas-de-color", 
            "text": "As\u00ed mismo, las expresiones de los estilos de mapbox-gl nos permiten  aplicar un n\u00famero discreto de valores de salida a\nrangos de entrada .\nLas definiciones del manual sin un ejemplo concreto son algo dif\u00edciles de leer:  1\n2\n3\n4\n5\n6 [ step , \n     input:   number , \n     stop_output_ 0 :   OutputType , \n     stop_input_ 1 :   number ,   stop_output_ 1 :   OutputType , \n     stop_input_n:   number ,   stop_output_n:   OutputType ,   ...  ] :   OutputType      Pero supongamos que queremos aplicar esta expresi\u00f3n para asignar tres colores en funci\u00f3n de rangos de densidad (  10.000 hab/km\u00b2 , de 10.000 a 25.000 hab/km\u00b2 , y   25.000 hab/km\u00b2 ), la expresi\u00f3n ser\u00eda:  1\n2\n3\n4\n5\n6 [ step , \n     [ get ,   densidad ], \n     Color_1 , \n     10000 ,   Color_2 , \n     25000 ,   Color_3  ]    M\u00e1s sencillo de lo que parec\u00eda.", 
            "title": "Rampas de color"
        }, 
        {
            "location": "/7_servidor_dinamico/#combinando-ambas-expresiones", 
            "text": "Podemos combinar ambas expresiones: \"calcula la densidad y luego asigna un color en funci\u00f3n de su valor\"   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 [ step , \n     [ / , \n         [ + ,   [ get ,   homes ],   [ get ,   dones ]], \n         [ / ,   [ get ,   area ],   1000000 ] \n     ], \n     #3d5941 , \n     17703 ,   #778868 , \n     29678 ,   #b5b991 , \n     37617 ,   #f6edbd , \n     46016 ,   #edbb8a , \n     54401 ,   #de8a5a , \n     66570 ,   #ca562c  ]     Tip  Los valores de corte para los diferentes colore se han obtenido calculando los cuantiles con PostgreSQL:  1\n2\n3\n4\n5\n6\n7 SELECT  ntile ,  CAST ( min ( densitat )   AS   INTEGER )    AS   minAmount ,  CAST ( max ( densitat )   AS   INTEGER )    AS   maxAmount  FROM   ( SELECT   ( homes + dones ) / ( area / 1000000 )   as   densitat ,   ntile ( 7 )   OVER   ( ORDER   BY   ( homes + dones ) / ( area / 1000000 ))   AS   ntile   FROM   seccion_censal )   x  GROUP   BY   ntile  ORDER   BY   ntile ;    Y la rampa de color y sus valores RGB de cada color se han obtenido de  carto-colors ,\nque a su vez est\u00e1n inspirados en ColorBrewer.    Aplicada a la propiedad  fill-color  del estilo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23      map . addLayer ({ \n         id :   seccion_censal , \n         source :   bcn_geodata , \n         source-layer :   seccion_censal , \n         type :   fill , \n         paint :   { \n             fill-opacity :   0.75 , \n             fill-color :   [ step , \n                 [ / , \n                     [ + ,   [ get ,   homes ],   [ get ,   dones ]], \n                     [ / ,   [ get ,   area ],   1000000 ] \n                 ], \n                 #3d5941 , \n                 17703 ,   #778868 , \n                 29678 ,   #b5b991 , \n                 37617 ,   #f6edbd , \n                 46016 ,   #edbb8a , \n                 54401 ,   #de8a5a , \n                 66570 ,   #ca562c \n             ], \n             fill-outline-color :   #000 \n         } \n     });    Obtendremos:", 
            "title": "Combinando ambas expresiones"
        }, 
        {
            "location": "/7_servidor_dinamico/#reto-anadir-extrusion-3d", 
            "text": "Aplicar una extrusi\u00f3n a cada secci\u00f3n censal de altura proporcional a su densidad de poblaci\u00f3n:", 
            "title": "Reto: A\u00f1adir extrusi\u00f3n 3D"
        }
    ]
}